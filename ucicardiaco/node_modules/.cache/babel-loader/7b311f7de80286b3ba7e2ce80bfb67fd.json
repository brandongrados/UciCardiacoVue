{"remainingRequest":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VItemGroup\\VItem.js","dependencies":[{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VItemGroup\\VItem.js","mtime":499162500000},{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Mixins\n\n\nimport { factory as GroupableFactory } from '../../mixins/groupable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nexport default mixins(GroupableFactory('itemGroup', 'v-item', 'v-item-group')\n/* @vue/component */\n).extend({\n  name: 'v-item',\n  props: {\n    value: {\n      required: false\n    }\n  },\n  render: function render() {\n    if (!this.$scopedSlots.default) {\n      consoleWarn('v-item is missing a default scopedSlot', this);\n      return null;\n    }\n\n    var element = void 0;\n    /* istanbul ignore else */\n\n    if (this.$scopedSlots.default) {\n      element = this.$scopedSlots.default({\n        active: this.isActive,\n        toggle: this.toggle\n      });\n    }\n\n    if (!element || typeof element === 'string' || Array.isArray(element)) {\n      consoleWarn('v-item should only contain a single element', this);\n      return element;\n    }\n\n    element.data = element.data || {};\n    element.data.class = [element.data.class, _defineProperty({}, this.activeClass, this.isActive)];\n    return element;\n  }\n});",{"version":3,"sources":["../../../src/components/VItemGroup/VItem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,SAAS,OAAA,IAAT,gBAAA,QAAA,wBAAA,C,CAEA;;AACA,OAAA,MAAA,MAAA,mBAAA;AACA,SAAA,WAAA,QAAA,oBAAA;AAKA,eAAe,MAAA,CACb,gBAAA,CAAA,WAAA,EAAA,QAAA,EAAA,cAAA;AACA;AAFa,CAAA,CAAA,MAAA,CAGN;AACP,EAAA,IAAA,EADO,QAAA;AAGP,EAAA,KAAA,EAAO;AACL,IAAA,KAAA,EAAO;AACL,MAAA,QAAA,EAAU;AADL;AADF,GAHA;AASP,EAAA,MATO,EAAA,SAAA,MAAA,GASD;AACJ,QAAI,CAAC,KAAA,YAAA,CAAL,OAAA,EAAgC;AAC9B,MAAA,WAAA,CAAA,wCAAA,EAAA,IAAA,CAAA;AAEA,aAAA,IAAA;AACD;;AAED,QAAI,OAAA,GAAA,KAAJ,CAAA;AAEA;;AACA,QAAI,KAAA,YAAA,CAAJ,OAAA,EAA+B;AAC7B,MAAA,OAAA,GAAU,KAAA,YAAA,CAAA,OAAA,CAA0B;AAClC,QAAA,MAAA,EAAQ,KAD0B,QAAA;AAElC,QAAA,MAAA,EAAQ,KAAK;AAFqB,OAA1B,CAAV;AAID;;AAED,QAAI,CAAA,OAAA,IAAY,OAAA,OAAA,KAAZ,QAAA,IAA2C,KAAA,CAAA,OAAA,CAA/C,OAA+C,CAA/C,EAAuE;AACrE,MAAA,WAAA,CAAA,6CAAA,EAAA,IAAA,CAAA;AAEA,aAAA,OAAA;AACD;;AAED,IAAA,OAAA,CAAA,IAAA,GAAe,OAAA,CAAA,IAAA,IAAf,EAAA;AACA,IAAA,OAAA,CAAA,IAAA,CAAA,KAAA,GAAsB,CACpB,OAAA,CAAA,IAAA,CADoB,KAAA,EAAA,eAAA,CAAA,EAAA,EAEjB,KAFiB,WAAA,EAEE,KAFxB,QAAsB,CAAA,CAAtB;AAKA,WAAA,OAAA;AACD;AAvCM,CAHM,CAAf","sourcesContent":["// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents } from 'vue/types/vnode'\n\nexport default mixins(\n  GroupableFactory('itemGroup', 'v-item', 'v-item-group')\n  /* @vue/component */\n).extend({\n  name: 'v-item',\n\n  props: {\n    value: {\n      required: false\n    }\n  },\n\n  render (): VNode {\n    if (!this.$scopedSlots.default) {\n      consoleWarn('v-item is missing a default scopedSlot', this)\n\n      return null as any\n    }\n\n    let element: VNode | VNodeChildrenArrayContents | string | undefined\n\n    /* istanbul ignore else */\n    if (this.$scopedSlots.default) {\n      element = this.$scopedSlots.default({\n        active: this.isActive,\n        toggle: this.toggle\n      })\n    }\n\n    if (!element || typeof element === 'string' || Array.isArray(element)) {\n      consoleWarn('v-item should only contain a single element', this)\n\n      return element as any\n    }\n\n    element.data = element.data || {}\n    element.data!.class = [\n      element.data!.class,\n      { [this.activeClass]: this.isActive }\n    ]\n\n    return element\n  }\n})\n"],"sourceRoot":""}]}