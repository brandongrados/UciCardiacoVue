{"remainingRequest":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTabs\\mixins\\tabs-touch.js","dependencies":[{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTabs\\mixins\\tabs-touch.js","mtime":499162500000},{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\n * Tabs touch\n *\n * @mixin\n */\n\n/* @vue/component */\nexport default {\n  methods: {\n    newOffset: function newOffset(direction) {\n      var clientWidth = this.$refs.wrapper.clientWidth;\n\n      if (direction === 'prev') {\n        return Math.max(this.scrollOffset - clientWidth, 0);\n      } else {\n        return Math.min(this.scrollOffset + clientWidth, this.$refs.container.clientWidth - clientWidth);\n      }\n    },\n    onTouchStart: function onTouchStart(e) {\n      this.startX = this.scrollOffset + e.touchstartX;\n      this.$refs.container.style.transition = 'none';\n      this.$refs.container.style.willChange = 'transform';\n    },\n    onTouchMove: function onTouchMove(e) {\n      this.scrollOffset = this.startX - e.touchmoveX;\n    },\n    onTouchEnd: function onTouchEnd() {\n      var container = this.$refs.container;\n      var wrapper = this.$refs.wrapper;\n      var maxScrollOffset = container.clientWidth - wrapper.clientWidth;\n      container.style.transition = null;\n      container.style.willChange = null;\n      /* istanbul ignore else */\n\n      if (this.scrollOffset < 0 || !this.isOverflowing) {\n        this.scrollOffset = 0;\n      } else if (this.scrollOffset >= maxScrollOffset) {\n        this.scrollOffset = maxScrollOffset;\n      }\n    }\n  }\n};",{"version":3,"sources":["../../../../src/components/VTabs/mixins/tabs-touch.js"],"names":[],"mappings":";;;;;;AAKA;AACA,eAAe;AACb,EAAA,OAAA,EAAS;AACP,IAAA,SADO,EAAA,SAAA,SAAA,CAAA,SAAA,EACa;AAClB,UAAM,WAAA,GAAc,KAAA,KAAA,CAAA,OAAA,CAApB,WAAA;;AAEA,UAAI,SAAA,KAAJ,MAAA,EAA0B;AACxB,eAAO,IAAA,CAAA,GAAA,CAAS,KAAA,YAAA,GAAT,WAAA,EAAP,CAAO,CAAP;AADF,OAAA,MAEO;AACL,eAAO,IAAA,CAAA,GAAA,CAAS,KAAA,YAAA,GAAT,WAAA,EAA0C,KAAA,KAAA,CAAA,SAAA,CAAA,WAAA,GAAjD,WAAO,CAAP;AACD;AARI,KAAA;AAUP,IAAA,YAVO,EAAA,SAAA,YAAA,CAAA,CAAA,EAUQ;AACb,WAAA,MAAA,GAAc,KAAA,YAAA,GAAoB,CAAA,CAAlC,WAAA;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,UAAA,GAAA,MAAA;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,UAAA,GAAA,WAAA;AAbK,KAAA;AAeP,IAAA,WAfO,EAAA,SAAA,WAAA,CAAA,CAAA,EAeO;AACZ,WAAA,YAAA,GAAoB,KAAA,MAAA,GAAc,CAAA,CAAlC,UAAA;AAhBK,KAAA;AAkBP,IAAA,UAlBO,EAAA,SAAA,UAAA,GAkBG;AACR,UAAM,SAAA,GAAY,KAAA,KAAA,CAAlB,SAAA;AACA,UAAM,OAAA,GAAU,KAAA,KAAA,CAAhB,OAAA;AACA,UAAM,eAAA,GAAkB,SAAA,CAAA,WAAA,GAAwB,OAAA,CAAhD,WAAA;AACA,MAAA,SAAA,CAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AACA,MAAA,SAAA,CAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AAEA;;AACA,UAAI,KAAA,YAAA,GAAA,CAAA,IAAyB,CAAC,KAA9B,aAAA,EAAkD;AAChD,aAAA,YAAA,GAAA,CAAA;AADF,OAAA,MAEO,IAAI,KAAA,YAAA,IAAJ,eAAA,EAA0C;AAC/C,aAAA,YAAA,GAAA,eAAA;AACD;AACF;AA/BM;AADI,CAAf","sourcesContent":["/**\n * Tabs touch\n *\n * @mixin\n */\n/* @vue/component */\nexport default {\n  methods: {\n    newOffset (direction) {\n      const clientWidth = this.$refs.wrapper.clientWidth\n\n      if (direction === 'prev') {\n        return Math.max(this.scrollOffset - clientWidth, 0)\n      } else {\n        return Math.min(this.scrollOffset + clientWidth, this.$refs.container.clientWidth - clientWidth)\n      }\n    },\n    onTouchStart (e) {\n      this.startX = this.scrollOffset + e.touchstartX\n      this.$refs.container.style.transition = 'none'\n      this.$refs.container.style.willChange = 'transform'\n    },\n    onTouchMove (e) {\n      this.scrollOffset = this.startX - e.touchmoveX\n    },\n    onTouchEnd () {\n      const container = this.$refs.container\n      const wrapper = this.$refs.wrapper\n      const maxScrollOffset = container.clientWidth - wrapper.clientWidth\n      container.style.transition = null\n      container.style.willChange = null\n\n      /* istanbul ignore else */\n      if (this.scrollOffset < 0 || !this.isOverflowing) {\n        this.scrollOffset = 0\n      } else if (this.scrollOffset >= maxScrollOffset) {\n        this.scrollOffset = maxScrollOffset\n      }\n    }\n  }\n}\n"],"sourceRoot":""}]}