{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTimePicker\\VTimePickerClock.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTimePicker\\VTimePickerClock.js","mtime":1590258019798},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590257978015},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590257976698}],"contextDependencies":[],"result":["import \"core-js/modules/es6.math.sign\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.object.assign\";\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport '../../../src/stylus/components/_time-picker-clock.styl'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport Themeable from '../../mixins/themeable';\n/* @vue/component */\n\nexport default {\n  name: 'v-time-picker-clock',\n  mixins: [Colorable, Themeable],\n  props: {\n    allowedValues: Function,\n    double: Boolean,\n    format: {\n      type: Function,\n      default: function _default(val) {\n        return val;\n      }\n    },\n    max: {\n      type: Number,\n      required: true\n    },\n    min: {\n      type: Number,\n      required: true\n    },\n    scrollable: Boolean,\n    readonly: Boolean,\n    rotate: {\n      type: Number,\n      default: 0\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    value: Number\n  },\n  data: function data() {\n    return {\n      inputValue: this.value,\n      isDragging: false,\n      valueOnMouseDown: null,\n      valueOnMouseUp: null\n    };\n  },\n  computed: {\n    count: function count() {\n      return this.max - this.min + 1;\n    },\n    degreesPerUnit: function degreesPerUnit() {\n      return 360 / this.roundCount;\n    },\n    degrees: function degrees() {\n      return this.degreesPerUnit * Math.PI / 180;\n    },\n    displayedValue: function displayedValue() {\n      return this.value == null ? this.min : this.value;\n    },\n    innerRadius: function innerRadius() {\n      return 0.62;\n    },\n    roundCount: function roundCount() {\n      return this.double ? this.count / 2 : this.count;\n    }\n  },\n  watch: {\n    value: function value(_value) {\n      this.inputValue = _value;\n    }\n  },\n  methods: {\n    wheel: function wheel(e) {\n      e.preventDefault();\n      var delta = Math.sign(e.wheelDelta || 1);\n      var value = this.displayedValue;\n\n      do {\n        value = value + delta;\n        value = (value - this.min + this.count) % this.count + this.min;\n      } while (!this.isAllowed(value) && value !== this.displayedValue);\n\n      if (value !== this.displayedValue) {\n        this.update(value);\n      }\n    },\n    isInner: function isInner(value) {\n      return this.double && value - this.min >= this.roundCount;\n    },\n    handScale: function handScale(value) {\n      return this.isInner(value) ? this.innerRadius : 1;\n    },\n    isAllowed: function isAllowed(value) {\n      return !this.allowedValues || this.allowedValues(value);\n    },\n    genValues: function genValues() {\n      var children = [];\n\n      for (var value = this.min; value <= this.max; value = value + this.step) {\n        var color = value === this.value && (this.color || 'accent');\n        children.push(this.$createElement('span', this.setBackgroundColor(color, {\n          staticClass: 'v-time-picker-clock__item',\n          'class': {\n            'v-time-picker-clock__item--active': value === this.displayedValue,\n            'v-time-picker-clock__item--disabled': !this.isAllowed(value)\n          },\n          style: this.getTransform(value),\n          domProps: {\n            innerHTML: '<span>' + this.format(value) + '</span>'\n          }\n        })));\n      }\n\n      return children;\n    },\n    genHand: function genHand() {\n      var scale = 'scaleY(' + this.handScale(this.displayedValue) + ')';\n      var angle = this.rotate + this.degreesPerUnit * (this.displayedValue - this.min);\n      var color = this.value != null && (this.color || 'accent');\n      return this.$createElement('div', this.setBackgroundColor(color, {\n        staticClass: 'v-time-picker-clock__hand',\n        'class': {\n          'v-time-picker-clock__hand--inner': this.isInner(this.value)\n        },\n        style: {\n          transform: 'rotate(' + angle + 'deg) ' + scale\n        }\n      }));\n    },\n    getTransform: function getTransform(i) {\n      var _getPosition = this.getPosition(i),\n          x = _getPosition.x,\n          y = _getPosition.y;\n\n      return {\n        left: 50 + x * 50 + '%',\n        top: 50 + y * 50 + '%'\n      };\n    },\n    getPosition: function getPosition(value) {\n      var rotateRadians = this.rotate * Math.PI / 180;\n      return {\n        x: Math.sin((value - this.min) * this.degrees + rotateRadians) * this.handScale(value),\n        y: -Math.cos((value - this.min) * this.degrees + rotateRadians) * this.handScale(value)\n      };\n    },\n    onMouseDown: function onMouseDown(e) {\n      e.preventDefault();\n      this.valueOnMouseDown = null;\n      this.valueOnMouseUp = null;\n      this.isDragging = true;\n      this.onDragMove(e);\n    },\n    onMouseUp: function onMouseUp() {\n      this.isDragging = false;\n\n      if (this.valueOnMouseUp !== null && this.isAllowed(this.valueOnMouseUp)) {\n        this.$emit('change', this.valueOnMouseUp);\n      }\n    },\n    onDragMove: function onDragMove(e) {\n      e.preventDefault();\n      if (!this.isDragging && e.type !== 'click') return;\n\n      var _$refs$clock$getBound = this.$refs.clock.getBoundingClientRect(),\n          width = _$refs$clock$getBound.width,\n          top = _$refs$clock$getBound.top,\n          left = _$refs$clock$getBound.left;\n\n      var _ref = 'touches' in e ? e.touches[0] : e,\n          clientX = _ref.clientX,\n          clientY = _ref.clientY;\n\n      var center = {\n        x: width / 2,\n        y: -width / 2\n      };\n      var coords = {\n        x: clientX - left,\n        y: top - clientY\n      };\n      var handAngle = Math.round(this.angle(center, coords) - this.rotate + 360) % 360; // (1 + this.innerRadius) / 4 = radius of the circle equally distant from inner and outer circles\n\n      var insideClick = this.double && this.euclidean(center, coords) / width < (1 + this.innerRadius) / 4;\n      var value = Math.round(handAngle / this.degreesPerUnit) + this.min + (insideClick ? this.roundCount : 0); // Necessary to fix edge case when selecting left part of the value(s) at 12 o'clock\n\n      var newValue = void 0;\n\n      if (handAngle >= 360 - this.degreesPerUnit / 2) {\n        newValue = insideClick ? this.max - this.roundCount + 1 : this.min;\n      } else {\n        newValue = value;\n      }\n\n      if (this.isAllowed(value)) {\n        if (this.valueOnMouseDown === null) {\n          this.valueOnMouseDown = newValue;\n        }\n\n        this.valueOnMouseUp = newValue;\n        this.update(newValue);\n      }\n    },\n    update: function update(value) {\n      if (this.inputValue !== value) {\n        this.inputValue = value;\n        this.$emit('input', value);\n      }\n    },\n    euclidean: function euclidean(p0, p1) {\n      var dx = p1.x - p0.x;\n      var dy = p1.y - p0.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n    angle: function angle(center, p1) {\n      var value = 2 * Math.atan2(p1.y - center.y - this.euclidean(center, p1), p1.x - center.x);\n      return Math.abs(value * 180 / Math.PI);\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var data = {\n      staticClass: 'v-time-picker-clock',\n      class: _extends({\n        'v-time-picker-clock--indeterminate': this.value == null\n      }, this.themeClasses),\n      on: this.readonly ? undefined : {\n        mousedown: this.onMouseDown,\n        mouseup: this.onMouseUp,\n        mouseleave: function mouseleave() {\n          return _this.isDragging && _this.onMouseUp();\n        },\n        touchstart: this.onMouseDown,\n        touchend: this.onMouseUp,\n        mousemove: this.onDragMove,\n        touchmove: this.onDragMove\n      },\n      ref: 'clock'\n    };\n    !this.readonly && this.scrollable && (data.on.wheel = this.wheel);\n    return h('div', data, [h('div', {\n      staticClass: 'v-time-picker-clock__inner'\n    }, [this.genHand(), this.genValues()])]);\n  }\n};",{"version":3,"sources":["../../../src/components/VTimePicker/VTimePickerClock.js"],"names":[],"mappings":"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","sourcesContent":["import '../../stylus/components/_time-picker-clock.styl'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Themeable from '../../mixins/themeable'\n\n/* @vue/component */\nexport default {\n  name: 'v-time-picker-clock',\n\n  mixins: [\n    Colorable,\n    Themeable\n  ],\n\n  props: {\n    allowedValues: Function,\n    double: Boolean,\n    format: {\n      type: Function,\n      default: val => val\n    },\n    max: {\n      type: Number,\n      required: true\n    },\n    min: {\n      type: Number,\n      required: true\n    },\n    scrollable: Boolean,\n    readonly: Boolean,\n    rotate: {\n      type: Number,\n      default: 0\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    value: Number\n  },\n\n  data () {\n    return {\n      inputValue: this.value,\n      isDragging: false,\n      valueOnMouseDown: null,\n      valueOnMouseUp: null\n    }\n  },\n\n  computed: {\n    count () {\n      return this.max - this.min + 1\n    },\n    degreesPerUnit () {\n      return 360 / this.roundCount\n    },\n    degrees () {\n      return this.degreesPerUnit * Math.PI / 180\n    },\n    displayedValue () {\n      return this.value == null ? this.min : this.value\n    },\n    innerRadius () {\n      return 0.62\n    },\n    roundCount () {\n      return this.double ? (this.count / 2) : this.count\n    }\n  },\n\n  watch: {\n    value (value) {\n      this.inputValue = value\n    }\n  },\n\n  methods: {\n    wheel (e) {\n      e.preventDefault()\n\n      const delta = Math.sign(e.wheelDelta || 1)\n      let value = this.displayedValue\n      do {\n        value = value + delta\n        value = (value - this.min + this.count) % this.count + this.min\n      } while (!this.isAllowed(value) && value !== this.displayedValue)\n\n      if (value !== this.displayedValue) {\n        this.update(value)\n      }\n    },\n    isInner (value) {\n      return this.double && (value - this.min >= this.roundCount)\n    },\n    handScale (value) {\n      return this.isInner(value) ? this.innerRadius : 1\n    },\n    isAllowed (value) {\n      return !this.allowedValues || this.allowedValues(value)\n    },\n    genValues () {\n      const children = []\n\n      for (let value = this.min; value <= this.max; value = value + this.step) {\n        const color = value === this.value && (this.color || 'accent')\n        children.push(this.$createElement('span', this.setBackgroundColor(color, {\n          staticClass: 'v-time-picker-clock__item',\n          'class': {\n            'v-time-picker-clock__item--active': value === this.displayedValue,\n            'v-time-picker-clock__item--disabled': !this.isAllowed(value)\n          },\n          style: this.getTransform(value),\n          domProps: { innerHTML: `<span>${this.format(value)}</span>` }\n        })))\n      }\n\n      return children\n    },\n    genHand () {\n      const scale = `scaleY(${this.handScale(this.displayedValue)})`\n      const angle = this.rotate + this.degreesPerUnit * (this.displayedValue - this.min)\n      const color = (this.value != null) && (this.color || 'accent')\n      return this.$createElement('div', this.setBackgroundColor(color, {\n        staticClass: 'v-time-picker-clock__hand',\n        'class': {\n          'v-time-picker-clock__hand--inner': this.isInner(this.value)\n        },\n        style: {\n          transform: `rotate(${angle}deg) ${scale}`\n        }\n      }))\n    },\n    getTransform (i) {\n      const { x, y } = this.getPosition(i)\n      return {\n        left: `${50 + x * 50}%`,\n        top: `${50 + y * 50}%`\n      }\n    },\n    getPosition (value) {\n      const rotateRadians = this.rotate * Math.PI / 180\n      return {\n        x: Math.sin((value - this.min) * this.degrees + rotateRadians) * this.handScale(value),\n        y: -Math.cos((value - this.min) * this.degrees + rotateRadians) * this.handScale(value)\n      }\n    },\n    onMouseDown (e) {\n      e.preventDefault()\n\n      this.valueOnMouseDown = null\n      this.valueOnMouseUp = null\n      this.isDragging = true\n      this.onDragMove(e)\n    },\n    onMouseUp () {\n      this.isDragging = false\n      if (this.valueOnMouseUp !== null && this.isAllowed(this.valueOnMouseUp)) {\n        this.$emit('change', this.valueOnMouseUp)\n      }\n    },\n    onDragMove (e) {\n      e.preventDefault()\n      if (!this.isDragging && e.type !== 'click') return\n\n      const { width, top, left } = this.$refs.clock.getBoundingClientRect()\n      const { clientX, clientY } = 'touches' in e ? e.touches[0] : e\n      const center = { x: width / 2, y: -width / 2 }\n      const coords = { x: clientX - left, y: top - clientY }\n      const handAngle = Math.round(this.angle(center, coords) - this.rotate + 360) % 360\n      // (1 + this.innerRadius) / 4 = radius of the circle equally distant from inner and outer circles\n      const insideClick = this.double && this.euclidean(center, coords) / width < (1 + this.innerRadius) / 4\n      const value = Math.round(handAngle / this.degreesPerUnit) +\n        this.min + (insideClick ? this.roundCount : 0)\n\n      // Necessary to fix edge case when selecting left part of the value(s) at 12 o'clock\n      let newValue\n      if (handAngle >= (360 - this.degreesPerUnit / 2)) {\n        newValue = insideClick ? this.max - this.roundCount + 1 : this.min\n      } else {\n        newValue = value\n      }\n\n      if (this.isAllowed(value)) {\n        if (this.valueOnMouseDown === null) {\n          this.valueOnMouseDown = newValue\n        }\n        this.valueOnMouseUp = newValue\n        this.update(newValue)\n      }\n    },\n    update (value) {\n      if (this.inputValue !== value) {\n        this.inputValue = value\n        this.$emit('input', value)\n      }\n    },\n    euclidean (p0, p1) {\n      const dx = p1.x - p0.x\n      const dy = p1.y - p0.y\n\n      return Math.sqrt(dx * dx + dy * dy)\n    },\n    angle (center, p1) {\n      const value = 2 * Math.atan2(p1.y - center.y - this.euclidean(center, p1), p1.x - center.x)\n      return Math.abs(value * 180 / Math.PI)\n    }\n  },\n\n  render (h) {\n    const data = {\n      staticClass: 'v-time-picker-clock',\n      class: {\n        'v-time-picker-clock--indeterminate': this.value == null,\n        ...this.themeClasses\n      },\n      on: this.readonly ? undefined : {\n        mousedown: this.onMouseDown,\n        mouseup: this.onMouseUp,\n        mouseleave: () => (this.isDragging && this.onMouseUp()),\n        touchstart: this.onMouseDown,\n        touchend: this.onMouseUp,\n        mousemove: this.onDragMove,\n        touchmove: this.onDragMove\n      },\n      ref: 'clock'\n    }\n\n    !this.readonly && this.scrollable && (data.on.wheel = this.wheel)\n\n    return h('div', data, [\n      h('div', {\n        staticClass: 'v-time-picker-clock__inner'\n      }, [\n        this.genHand(),\n        this.genValues()\n      ])\n    ])\n  }\n}\n"],"sourceRoot":""}]}