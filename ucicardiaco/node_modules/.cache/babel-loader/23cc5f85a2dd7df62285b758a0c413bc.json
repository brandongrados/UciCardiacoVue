{"remainingRequest":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\util\\mask.js","dependencies":[{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\util\\mask.js","mtime":1590205713211},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590205630444},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590379779432}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\n\n/**\r\n * Default delimiter RegExp\r\n *\r\n * @type {RegExp}\r\n */\nexport var defaultDelimiters = /[-!$%^&*()_+|~=`{}[\\]:\";'<>?,./\\\\ ]/;\n/**\r\n *\r\n * @param {String} char\r\n *\r\n * @return {Boolean}\r\n */\n\nexport var isMaskDelimiter = function isMaskDelimiter(char) {\n  return char && defaultDelimiters.test(char);\n};\n/**\r\n * Mask keys\r\n *\r\n * @type {Object}\r\n */\n\nvar allowedMasks = {\n  '#': {\n    test: function test(char) {\n      return char.match(/[0-9]/);\n    }\n  },\n  'A': {\n    test: function test(char) {\n      return char.match(/[A-Z]/i);\n    },\n    convert: function convert(char) {\n      return char.toUpperCase();\n    }\n  },\n  'a': {\n    test: function test(char) {\n      return char.match(/[a-z]/i);\n    },\n    convert: function convert(char) {\n      return char.toLowerCase();\n    }\n  },\n  'N': {\n    test: function test(char) {\n      return char.match(/[0-9A-Z]/i);\n    },\n    convert: function convert(char) {\n      return char.toUpperCase();\n    }\n  },\n  'n': {\n    test: function test(char) {\n      return char.match(/[0-9a-z]/i);\n    },\n    convert: function convert(char) {\n      return char.toLowerCase();\n    }\n  },\n  'X': {\n    test: isMaskDelimiter\n  }\n};\n/**\r\n * Is Character mask\r\n *\r\n * @param  {String} char\r\n *\r\n * @return {Boolean}\r\n */\n\nvar isMask = function isMask(char) {\n  return allowedMasks.hasOwnProperty(char);\n};\n/**\r\n * Automatically convert char case\r\n *\r\n * @param  {String} mask\r\n * @param  {String} char\r\n *\r\n * @return {String}\r\n */\n\n\nvar convert = function convert(mask, char) {\n  return allowedMasks[mask].convert ? allowedMasks[mask].convert(char) : char;\n};\n/**\r\n * Mask Validation\r\n *\r\n * @param  {String} mask\r\n * @param  {String} char\r\n *\r\n * @return {Boolean}\r\n */\n\n\nvar maskValidates = function maskValidates(mask, char) {\n  if (char == null || !isMask(mask)) return false;\n  return allowedMasks[mask].test(char);\n};\n/**\r\n * Mask Text\r\n *\r\n * Takes a string or an array of characters\r\n * and returns a masked string\r\n *\r\n * @param {*} text\r\n * @param {Array|String} masked\r\n * @param {Boolean} [dontFillMaskBlanks]\r\n *\r\n * @return {String}\r\n */\n\n\nexport var maskText = function maskText(text, masked, dontFillMaskBlanks) {\n  if (text == null) return '';\n  text = String(text);\n  if (!masked.length || !text.length) return text;\n  if (!Array.isArray(masked)) masked = masked.split('');\n  var textIndex = 0;\n  var maskIndex = 0;\n  var newText = '';\n\n  while (maskIndex < masked.length) {\n    var mask = masked[maskIndex]; // Assign the next character\n\n    var char = text[textIndex]; // Check if mask is delimiter\n    // and current char matches\n\n    if (!isMask(mask) && char === mask) {\n      newText += mask;\n      textIndex++; // Check if not mask\n    } else if (!isMask(mask) && !dontFillMaskBlanks) {\n      newText += mask; // Check if is mask and validates\n    } else if (maskValidates(mask, char)) {\n      newText += convert(mask, char);\n      textIndex++;\n    } else {\n      return newText;\n    }\n\n    maskIndex++;\n  }\n\n  return newText;\n};\n/**\r\n * Unmask Text\r\n *\r\n * @param {String} text\r\n *\r\n * @return {String}\r\n */\n\nexport var unmaskText = function unmaskText(text) {\n  return text ? String(text).replace(new RegExp(defaultDelimiters, 'g'), '') : text;\n};",{"version":3,"sources":["../../src/util/mask.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * Default delimiter RegExp\n *\n * @type {RegExp}\n */\nexport const defaultDelimiters = /[-!$%^&*()_+|~=`{}[\\]:\";'<>?,./\\\\ ]/\n\n/**\n *\n * @param {String} char\n *\n * @return {Boolean}\n */\nexport const isMaskDelimiter = char => char && defaultDelimiters.test(char)\n\n/**\n * Mask keys\n *\n * @type {Object}\n */\nconst allowedMasks = {\n  '#': {\n    test: char => char.match(/[0-9]/)\n  },\n  'A': {\n    test: char => char.match(/[A-Z]/i),\n    convert: char => char.toUpperCase()\n  },\n  'a': {\n    test: char => char.match(/[a-z]/i),\n    convert: char => char.toLowerCase()\n  },\n  'N': {\n    test: char => char.match(/[0-9A-Z]/i),\n    convert: char => char.toUpperCase()\n  },\n  'n': {\n    test: char => char.match(/[0-9a-z]/i),\n    convert: char => char.toLowerCase()\n  },\n  'X': {\n    test: isMaskDelimiter\n  }\n}\n\n/**\n * Is Character mask\n *\n * @param  {String} char\n *\n * @return {Boolean}\n */\nconst isMask = char => allowedMasks.hasOwnProperty(char)\n\n/**\n * Automatically convert char case\n *\n * @param  {String} mask\n * @param  {String} char\n *\n * @return {String}\n */\nconst convert = (mask, char) => {\n  return allowedMasks[mask].convert ? allowedMasks[mask].convert(char) : char\n}\n\n/**\n * Mask Validation\n *\n * @param  {String} mask\n * @param  {String} char\n *\n * @return {Boolean}\n */\nconst maskValidates = (mask, char) => {\n  if (char == null || !isMask(mask)) return false\n  return allowedMasks[mask].test(char)\n}\n\n/**\n * Mask Text\n *\n * Takes a string or an array of characters\n * and returns a masked string\n *\n * @param {*} text\n * @param {Array|String} masked\n * @param {Boolean} [dontFillMaskBlanks]\n *\n * @return {String}\n */\nexport const maskText = (text, masked, dontFillMaskBlanks) => {\n  if (text == null) return ''\n  text = String(text)\n  if (!masked.length || !text.length) return text\n  if (!Array.isArray(masked)) masked = masked.split('')\n\n  let textIndex = 0\n  let maskIndex = 0\n  let newText = ''\n\n  while (maskIndex < masked.length) {\n    const mask = masked[maskIndex]\n\n    // Assign the next character\n    const char = text[textIndex]\n\n    // Check if mask is delimiter\n    // and current char matches\n    if (!isMask(mask) && char === mask) {\n      newText += mask\n      textIndex++\n    // Check if not mask\n    } else if (!isMask(mask) && !dontFillMaskBlanks) {\n      newText += mask\n    // Check if is mask and validates\n    } else if (maskValidates(mask, char)) {\n      newText += convert(mask, char)\n      textIndex++\n    } else {\n      return newText\n    }\n\n    maskIndex++\n  }\n\n  return newText\n}\n\n/**\n * Unmask Text\n *\n * @param {String} text\n *\n * @return {String}\n */\nexport const unmaskText = text => {\n  return text ? String(text).replace(new RegExp(defaultDelimiters, 'g'), '') : text\n}\n"],"sourceRoot":""}]}