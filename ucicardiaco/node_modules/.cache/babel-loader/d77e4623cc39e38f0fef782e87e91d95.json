{"remainingRequest":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\directives\\touch.js","dependencies":[{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\directives\\touch.js","mtime":1590205710539},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590205630444},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590205629546}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.assign\";\nimport { keys } from '../util/helpers';\n\nvar handleGesture = function handleGesture(wrapper) {\n  var touchstartX = wrapper.touchstartX,\n      touchendX = wrapper.touchendX,\n      touchstartY = wrapper.touchstartY,\n      touchendY = wrapper.touchendY;\n  var dirRatio = 0.5;\n  var minDistance = 16;\n  wrapper.offsetX = touchendX - touchstartX;\n  wrapper.offsetY = touchendY - touchstartY;\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && touchendX < touchstartX - minDistance && wrapper.left(wrapper);\n    wrapper.right && touchendX > touchstartX + minDistance && wrapper.right(wrapper);\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && touchendY < touchstartY - minDistance && wrapper.up(wrapper);\n    wrapper.down && touchendY > touchstartY + minDistance && wrapper.down(wrapper);\n  }\n};\n\nfunction _touchstart(event, wrapper) {\n  var touch = event.changedTouches[0];\n  wrapper.touchstartX = touch.clientX;\n  wrapper.touchstartY = touch.clientY;\n  wrapper.start && wrapper.start(Object.assign(event, wrapper));\n}\n\nfunction _touchend(event, wrapper) {\n  var touch = event.changedTouches[0];\n  wrapper.touchendX = touch.clientX;\n  wrapper.touchendY = touch.clientY;\n  wrapper.end && wrapper.end(Object.assign(event, wrapper));\n  handleGesture(wrapper);\n}\n\nfunction _touchmove(event, wrapper) {\n  var touch = event.changedTouches[0];\n  wrapper.touchmoveX = touch.clientX;\n  wrapper.touchmoveY = touch.clientY;\n  wrapper.move && wrapper.move(Object.assign(event, wrapper));\n}\n\nfunction createHandlers(value) {\n  var wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end\n  };\n  return {\n    touchstart: function touchstart(e) {\n      return _touchstart(e, wrapper);\n    },\n    touchend: function touchend(e) {\n      return _touchend(e, wrapper);\n    },\n    touchmove: function touchmove(e) {\n      return _touchmove(e, wrapper);\n    }\n  };\n}\n\nfunction inserted(el, binding, vnode) {\n  var value = binding.value;\n  var target = value.parent ? el.parentElement : el;\n  var options = value.options || {\n    passive: true\n  }; // Needed to pass unit tests\n\n  if (!target) return;\n  var handlers = createHandlers(binding.value);\n  target._touchHandlers = Object(target._touchHandlers);\n  target._touchHandlers[vnode.context._uid] = handlers;\n  keys(handlers).forEach(function (eventName) {\n    target.addEventListener(eventName, handlers[eventName], options);\n  });\n}\n\nfunction unbind(el, binding, vnode) {\n  var target = binding.value.parent ? el.parentElement : el;\n  if (!target || !target._touchHandlers) return;\n  var handlers = target._touchHandlers[vnode.context._uid];\n  keys(handlers).forEach(function (eventName) {\n    target.removeEventListener(eventName, handlers[eventName]);\n  });\n  delete target._touchHandlers[vnode.context._uid];\n}\n\nexport default {\n  inserted: inserted,\n  unbind: unbind\n};",{"version":3,"sources":["../../src/directives/touch.ts"],"names":[],"mappings":"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","sourcesContent":["import { VNodeDirective, VNode } from 'vue/types/vnode'\nimport { keys } from '../util/helpers'\n\nexport interface TouchStoredHandlers {\n  touchstart: (e: TouchEvent) => void\n  touchend: (e: TouchEvent) => void\n  touchmove: (e: TouchEvent) => void\n}\n\ninterface TouchHandlers {\n  start?: (wrapperEvent: TouchEvent & TouchWrapper) => void\n  end?: (wrapperEvent: TouchEvent & TouchWrapper) => void\n  move?: (wrapperEvent: TouchEvent & TouchWrapper) => void\n  left?: (wrapper: TouchWrapper) => void\n  right?: (wrapper: TouchWrapper) => void\n  up?: (wrapper: TouchWrapper) => void\n  down?: (wrapper: TouchWrapper) => void\n}\n\ninterface TouchWrapper extends TouchHandlers {\n  touchstartX: number\n  touchstartY: number\n  touchmoveX: number\n  touchmoveY: number\n  touchendX: number\n  touchendY: number\n  offsetX: number\n  offsetY: number\n}\n\ninterface TouchVNodeDirective extends VNodeDirective {\n  value: TouchHandlers & {\n    parent?: boolean\n    options?: AddEventListenerOptions\n  }\n}\n\nconst handleGesture = (wrapper: TouchWrapper) => {\n  const { touchstartX, touchendX, touchstartY, touchendY } = wrapper\n  const dirRatio = 0.5\n  const minDistance = 16\n  wrapper.offsetX = touchendX - touchstartX\n  wrapper.offsetY = touchendY - touchstartY\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper)\n    wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper)\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper)\n    wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper)\n  }\n}\n\nfunction touchstart (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchstartX = touch.clientX\n  wrapper.touchstartY = touch.clientY\n\n  wrapper.start &&\n    wrapper.start(Object.assign(event, wrapper))\n}\n\nfunction touchend (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchendX = touch.clientX\n  wrapper.touchendY = touch.clientY\n\n  wrapper.end &&\n    wrapper.end(Object.assign(event, wrapper))\n\n  handleGesture(wrapper)\n}\n\nfunction touchmove (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchmoveX = touch.clientX\n  wrapper.touchmoveY = touch.clientY\n\n  wrapper.move && wrapper.move(Object.assign(event, wrapper))\n}\n\nfunction createHandlers (value: TouchHandlers): TouchStoredHandlers {\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end\n  }\n\n  return {\n    touchstart: (e: TouchEvent) => touchstart(e, wrapper),\n    touchend: (e: TouchEvent) => touchend(e, wrapper),\n    touchmove: (e: TouchEvent) => touchmove(e, wrapper)\n  }\n}\n\nfunction inserted (el: HTMLElement, binding: TouchVNodeDirective, vnode: VNode) {\n  const value = binding.value\n  const target = value.parent ? el.parentElement : el\n  const options = value.options || { passive: true }\n\n  // Needed to pass unit tests\n  if (!target) return\n\n  const handlers = createHandlers(binding.value)\n  target._touchHandlers = Object(target._touchHandlers)\n  target._touchHandlers![vnode.context!._uid] = handlers\n\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName] as EventListener, options)\n  })\n}\n\nfunction unbind (el: HTMLElement, binding: TouchVNodeDirective, vnode: VNode) {\n  const target = binding.value.parent ? el.parentElement : el\n  if (!target || !target._touchHandlers) return\n\n  const handlers = target._touchHandlers[vnode.context!._uid]\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName])\n  })\n  delete target._touchHandlers[vnode.context!._uid]\n}\n\nexport default {\n  inserted,\n  unbind\n}\n"],"sourceRoot":""}]}