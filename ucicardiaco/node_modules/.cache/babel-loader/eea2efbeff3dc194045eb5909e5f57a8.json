{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\mixins\\colorable.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\mixins\\colorable.js","mtime":1589651993124},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589651934081},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1589651931824}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from 'vue';\n\nfunction isCssColor(color) {\n  return !!color && !!color.match(/^(#|(rgb|hsl)a?\\()/);\n}\n\nexport default Vue.extend({\n  name: 'colorable',\n  props: {\n    color: String\n  },\n  methods: {\n    setBackgroundColor: function setBackgroundColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (isCssColor(color)) {\n        data.style = _extends({}, data.style, {\n          'background-color': '' + color,\n          'border-color': '' + color\n        });\n      } else if (color) {\n        data.class = _extends({}, data.class, _defineProperty({}, color, true));\n      }\n\n      return data;\n    },\n    setTextColor: function setTextColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (isCssColor(color)) {\n        data.style = _extends({}, data.style, {\n          'color': '' + color,\n          'caret-color': '' + color\n        });\n      } else if (color) {\n        var _color$toString$trim$ = color.toString().trim().split(' ', 2),\n            _color$toString$trim$2 = _slicedToArray(_color$toString$trim$, 2),\n            colorName = _color$toString$trim$2[0],\n            colorModifier = _color$toString$trim$2[1];\n\n        data.class = _extends({}, data.class, _defineProperty({}, colorName + '--text', true));\n\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true;\n        }\n      }\n\n      return data;\n    }\n  }\n});",{"version":3,"sources":["../../src/mixins/colorable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,GAAA,MAAA,KAAA;;AAGA,SAAA,UAAA,CAAA,KAAA,EAA2C;AACzC,SAAO,CAAC,CAAD,KAAA,IAAW,CAAC,CAAC,KAAA,CAAA,KAAA,CAApB,oBAAoB,CAApB;AACD;;AAED,eAAe,GAAA,CAAA,MAAA,CAAW;AACxB,EAAA,IAAA,EADwB,WAAA;AAGxB,EAAA,KAAA,EAAO;AACL,IAAA,KAAA,EAAO;AADF,GAHiB;AAOxB,EAAA,OAAA,EAAS;AACP,IAAA,kBADO,EAAA,SAAA,kBAAA,CAAA,KAAA,EACyD;AAAA,UAApB,IAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAF,EAAE;;AAC9D,UAAI,UAAA,CAAJ,KAAI,CAAJ,EAAuB;AACrB,QAAA,IAAA,CAAA,KAAA,GAAA,QAAA,CAAA,EAAA,EACK,IAAA,CADL,KAAA,EAAA;AAEE,8BAAA,KAFF,KAAA;AAGE,0BAAA,KAAmB;AAHrB,SAAA,CAAA;AADF,OAAA,MAMO,IAAA,KAAA,EAAW;AAChB,QAAA,IAAA,CAAA,KAAA,GAAA,QAAA,CAAA,EAAA,EACK,IAAA,CADL,KAAA,EAAA,eAAA,CAAA,EAAA,EAAA,KAAA,EAAA,IAAA,CAAA,CAAA;AAID;;AAED,aAAA,IAAA;AAfK,KAAA;AAkBP,IAAA,YAlBO,EAAA,SAAA,YAAA,CAAA,KAAA,EAkBmD;AAAA,UAApB,IAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAF,EAAE;;AACxD,UAAI,UAAA,CAAJ,KAAI,CAAJ,EAAuB;AACrB,QAAA,IAAA,CAAA,KAAA,GAAA,QAAA,CAAA,EAAA,EACK,IAAA,CADL,KAAA,EAAA;AAEE,mBAAA,KAFF,KAAA;AAGE,yBAAA,KAAkB;AAHpB,SAAA,CAAA;AADF,OAAA,MAMO,IAAA,KAAA,EAAW;AAAA,YAAA,qBAAA,GACmB,KAAA,CAAA,QAAA,GAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EADnB,CACmB,CADnB;AAAA,YAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,YACT,SADS,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,YACE,aADF,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAEhB,QAAA,IAAA,CAAA,KAAA,GAAA,QAAA,CAAA,EAAA,EACK,IAAA,CADL,KAAA,EAAA,eAAA,CAAA,EAAA,EAEG,SAAA,GAFH,QAAA,EAAA,IAAA,CAAA,CAAA;;AAIA,YAAA,aAAA,EAAmB;AACjB,UAAA,IAAA,CAAA,KAAA,CAAW,WAAX,aAAA,IAAA,IAAA;AACD;AACF;;AACD,aAAA,IAAA;AACD;AApCM;AAPe,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\n\nfunction isCssColor (color?: string | false): boolean {\n  return !!color && !!color.match(/^(#|(rgb|hsl)a?\\()/)\n}\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style,\n          'background-color': `${color}`,\n          'border-color': `${color}`\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style,\n          'color': `${color}`,\n          'caret-color': `${color}`\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    }\n  }\n})\n"],"sourceRoot":""}]}