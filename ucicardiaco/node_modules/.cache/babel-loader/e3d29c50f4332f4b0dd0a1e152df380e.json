{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VOverflowBtn\\VOverflowBtn.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VOverflowBtn\\VOverflowBtn.js","mtime":1589651992535},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589651934081},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1589651931824}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.object.assign\";\n// Styles\nimport '../../../src/stylus/components/_overflow-buttons.styl'; // Extensions\n\nimport VSelect from '../VSelect/VSelect';\nimport VAutocomplete from '../VAutocomplete';\nimport VTextField from '../VTextField/VTextField';\nimport VBtn from '../VBtn';\nimport { consoleWarn } from '../../util/console';\n/* @vue/component */\n\nexport default {\n  name: 'v-overflow-btn',\n  extends: VAutocomplete,\n  props: {\n    segmented: Boolean,\n    editable: Boolean,\n    transition: VSelect.props.transition\n  },\n  computed: {\n    classes: function classes() {\n      return Object.assign(VAutocomplete.computed.classes.call(this), {\n        'v-overflow-btn': true,\n        'v-overflow-btn--segmented': this.segmented,\n        'v-overflow-btn--editable': this.editable\n      });\n    },\n    isAnyValueAllowed: function isAnyValueAllowed() {\n      return this.editable || VAutocomplete.computed.isAnyValueAllowed.call(this);\n    },\n    isSingle: function isSingle() {\n      return true;\n    },\n    computedItems: function computedItems() {\n      return this.segmented ? this.allItems : this.filteredItems;\n    },\n    $_menuProps: function $_menuProps() {\n      var props = VAutocomplete.computed.$_menuProps.call(this);\n      props.transition = props.transition || 'v-menu-transition';\n      return props;\n    }\n  },\n  methods: {\n    genSelections: function genSelections() {\n      return this.editable ? VAutocomplete.methods.genSelections.call(this) : VSelect.methods.genSelections.call(this); // Override v-autocomplete's override\n    },\n    genCommaSelection: function genCommaSelection(item, index, last) {\n      return this.segmented ? this.genSegmentedBtn(item) : VSelect.methods.genCommaSelection.call(this, item, index, last);\n    },\n    genInput: function genInput() {\n      var input = VTextField.methods.genInput.call(this);\n      input.data.domProps.value = this.editable ? this.internalSearch : '';\n      input.data.attrs.readonly = !this.isAnyValueAllowed;\n      return input;\n    },\n    genLabel: function genLabel() {\n      if (this.editable && this.isFocused) return null;\n      var label = VTextField.methods.genLabel.call(this);\n      if (!label) return label; // Reset previously set styles from parent\n\n      label.data.style = {};\n      return label;\n    },\n    genSegmentedBtn: function genSegmentedBtn(item) {\n      var _this = this;\n\n      var itemValue = this.getValue(item);\n      var itemObj = this.computedItems.find(function (i) {\n        return _this.getValue(i) === itemValue;\n      }) || item;\n\n      if (!itemObj.text || !itemObj.callback) {\n        consoleWarn('When using \\'segmented\\' prop without a selection slot, items must contain both a text and callback property', this);\n        return null;\n      }\n\n      return this.$createElement(VBtn, {\n        props: {\n          flat: true\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            itemObj.callback(e);\n          }\n        }\n      }, [itemObj.text]);\n    },\n    setSelectedItems: function setSelectedItems() {\n      if (this.internalValue == null) {\n        this.selectedItems = [];\n      } else {\n        this.selectedItems = [this.internalValue];\n      }\n    }\n  }\n};",{"version":3,"sources":["../../../src/components/VOverflowBtn/VOverflowBtn.js"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport '../../stylus/components/_overflow-buttons.styl'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete'\nimport VTextField from '../VTextField/VTextField'\n\nimport VBtn from '../VBtn'\n\nimport { consoleWarn } from '../../util/console'\n\n/* @vue/component */\nexport default {\n  name: 'v-overflow-btn',\n\n  extends: VAutocomplete,\n\n  props: {\n    segmented: Boolean,\n    editable: Boolean,\n    transition: VSelect.props.transition\n  },\n\n  computed: {\n    classes () {\n      return Object.assign(VAutocomplete.computed.classes.call(this), {\n        'v-overflow-btn': true,\n        'v-overflow-btn--segmented': this.segmented,\n        'v-overflow-btn--editable': this.editable\n      })\n    },\n    isAnyValueAllowed () {\n      return this.editable ||\n        VAutocomplete.computed.isAnyValueAllowed.call(this)\n    },\n    isSingle () {\n      return true\n    },\n    computedItems () {\n      return this.segmented ? this.allItems : this.filteredItems\n    },\n    $_menuProps () {\n      const props = VAutocomplete.computed.$_menuProps.call(this)\n      props.transition = props.transition || 'v-menu-transition'\n      return props\n    }\n  },\n\n  methods: {\n    genSelections () {\n      return this.editable\n        ? VAutocomplete.methods.genSelections.call(this)\n        : VSelect.methods.genSelections.call(this) // Override v-autocomplete's override\n    },\n    genCommaSelection (item, index, last) {\n      return this.segmented\n        ? this.genSegmentedBtn(item)\n        : VSelect.methods.genCommaSelection.call(this, item, index, last)\n    },\n    genInput () {\n      const input = VTextField.methods.genInput.call(this)\n\n      input.data.domProps.value = this.editable ? this.internalSearch : ''\n      input.data.attrs.readonly = !this.isAnyValueAllowed\n\n      return input\n    },\n    genLabel () {\n      if (this.editable && this.isFocused) return null\n\n      const label = VTextField.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      // Reset previously set styles from parent\n      label.data.style = {}\n\n      return label\n    },\n    genSegmentedBtn (item) {\n      const itemValue = this.getValue(item)\n      const itemObj = this.computedItems.find(i => this.getValue(i) === itemValue) || item\n\n      if (!itemObj.text || !itemObj.callback) {\n        consoleWarn('When using \\'segmented\\' prop without a selection slot, items must contain both a text and callback property', this)\n        return null\n      }\n\n      return this.$createElement(VBtn, {\n        props: { flat: true },\n        on: {\n          click (e) {\n            e.stopPropagation()\n            itemObj.callback(e)\n          }\n        }\n      }, [itemObj.text])\n    },\n    setSelectedItems () {\n      if (this.internalValue == null) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = [this.internalValue]\n      }\n    }\n  }\n}\n"],"sourceRoot":""}]}