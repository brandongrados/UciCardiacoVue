{"remainingRequest":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\directives\\click-outside.js","dependencies":[{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\directives\\click-outside.js","mtime":1590205710524},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590205630444},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590379779432}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction closeConditional() {\n  return false;\n}\n\nfunction directive(e, el, binding) {\n  // Args may not always be supplied\n  binding.args = binding.args || {}; // If no closeConditional was supplied assign a default\n\n  var isActive = binding.args.closeConditional || closeConditional; // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n\n  if (!e || isActive(e) === false) return; // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n\n  if ('isTrusted' in e && !e.isTrusted || 'pointerType' in e && !e.pointerType) return; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  var elements = (binding.args.include || function () {\n    return [];\n  })(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occure before\n  // the bubbling click event on any outside elements.\n\n  !clickedInEls(e, elements) && setTimeout(function () {\n    isActive(e) && binding.value(e);\n  }, 0);\n}\n\nfunction clickedInEls(e, elements) {\n  // Get position of click\n  var x = e.clientX,\n      y = e.clientY; // Loop over all included elements to see if click was in any of them\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var el = _step.value;\n      if (clickedInEl(el, x, y)) return true;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction clickedInEl(el, x, y) {\n  // Get bounding rect for element\n  // (we're in capturing event and we want to check for multiple elements,\n  //  so can't use target.)\n  var b = el.getBoundingClientRect(); // Check if the click was in the element's bounding rect\n\n  return x >= b.left && x <= b.right && y >= b.top && y <= b.bottom;\n}\n\nexport default {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted: function inserted(el, binding) {\n    var onClick = function onClick(e) {\n      return directive(e, el, binding);\n    }; // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n\n\n    var app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app.addEventListener('click', onClick, true);\n    el._clickOutside = onClick;\n  },\n  unbind: function unbind(el) {\n    if (!el._clickOutside) return;\n    var app = document.querySelector('[data-app]') || document.body; // This is only for unit tests\n\n    app && app.removeEventListener('click', el._clickOutside, true);\n    delete el._clickOutside;\n  }\n};",{"version":3,"sources":["../../src/directives/click-outside.ts"],"names":[],"mappings":"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","sourcesContent":["import { VNodeDirective } from 'vue/types/vnode'\n\ninterface ClickOutsideBindingArgs {\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirective extends VNodeDirective {\n  value: (e: Event) => void\n  args?: ClickOutsideBindingArgs\n}\n\nfunction closeConditional () {\n  return false\n}\n\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): void {\n  // Args may not always be supplied\n  binding.args = binding.args || {}\n\n  // If no closeConditional was supplied assign a default\n  const isActive = (binding.args.closeConditional || closeConditional)\n\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || isActive(e) === false) return\n\n  // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n  if (('isTrusted' in e && !e.isTrusted) ||\n    ('pointerType' in e && !e.pointerType)\n  ) return\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = (binding.args.include || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occure before\n  // the bubbling click event on any outside elements.\n  !clickedInEls(e, elements) && setTimeout(() => {\n    isActive(e) && binding.value(e)\n  }, 0)\n}\n\nfunction clickedInEls (e: PointerEvent, elements: HTMLElement[]): boolean {\n  // Get position of click\n  const { clientX: x, clientY: y } = e\n  // Loop over all included elements to see if click was in any of them\n  for (const el of elements) {\n    if (clickedInEl(el, x, y)) return true\n  }\n\n  return false\n}\n\nfunction clickedInEl (el: HTMLElement, x: number, y: number): boolean {\n  // Get bounding rect for element\n  // (we're in capturing event and we want to check for multiple elements,\n  //  so can't use target.)\n  const b = el.getBoundingClientRect()\n  // Check if the click was in the element's bounding rect\n\n  return x >= b.left && x <= b.right && y >= b.top && y <= b.bottom\n}\n\nexport default {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el: HTMLElement, binding: ClickOutsideDirective) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding)\n    // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app.addEventListener('click', onClick, true)\n    el._clickOutside = onClick\n  },\n\n  unbind (el: HTMLElement) {\n    if (!el._clickOutside) return\n\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app && app.removeEventListener('click', el._clickOutside, true)\n    delete el._clickOutside\n  }\n}\n"],"sourceRoot":""}]}