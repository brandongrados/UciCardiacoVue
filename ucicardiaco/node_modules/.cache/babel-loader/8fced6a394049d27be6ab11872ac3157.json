{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTabs\\mixins\\tabs-watchers.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTabs\\mixins\\tabs-watchers.js","mtime":1590258019787},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590257978015},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590257976698}],"contextDependencies":[],"result":["/**\r\n * Tabs watchers\r\n *\r\n * @mixin\r\n */\n\n/* @vue/component */\nexport default {\n  watch: {\n    activeTab: function activeTab(val, oldVal) {\n      this.setOverflow();\n      if (!val) return;\n      this.tabItems && this.tabItems(this.getValue(val, this.items.indexOf(val))); // Do nothing for first tab\n      // is handled from isBooted\n      // watcher\n\n      if (oldVal == null) return;\n      this.updateTabsView();\n    },\n    alignWithTitle: 'callSlider',\n    centered: 'callSlider',\n    fixedTabs: 'callSlider',\n    hasArrows: function hasArrows(val) {\n      if (!val) this.scrollOffset = 0;\n    },\n\n    /* @deprecate */\n    internalValue: function internalValue(val) {\n      /* istanbul ignore else */\n      if (!this.$listeners['input']) return;\n      this.$emit('input', val);\n    },\n    lazyValue: 'updateTabs',\n    right: 'callSlider',\n    '$vuetify.application.left': 'onResize',\n    '$vuetify.application.right': 'onResize',\n    scrollOffset: function scrollOffset(val) {\n      this.$refs.container.style.transform = 'translateX(' + -val + 'px)';\n\n      if (this.hasArrows) {\n        this.prevIconVisible = this.checkPrevIcon();\n        this.nextIconVisible = this.checkNextIcon();\n      }\n    }\n  }\n};",{"version":3,"sources":["../../../../src/components/VTabs/mixins/tabs-watchers.js"],"names":[],"mappings":";;;;;;AAKA;AACA,eAAe;AACb,EAAA,KAAA,EAAO;AACL,IAAA,SADK,EAAA,SAAA,SAAA,CAAA,GAAA,EAAA,MAAA,EACiB;AACpB,WAAA,WAAA;AAEA,UAAI,CAAJ,GAAA,EAAU;AAEV,WAAA,QAAA,IAAiB,KAAA,QAAA,CACf,KAAA,QAAA,CAAA,GAAA,EAAmB,KAAA,KAAA,CAAA,OAAA,CADrB,GACqB,CAAnB,CADe,CAAjB,CALoB,CASpB;AACA;AACA;;AACA,UAAI,MAAA,IAAJ,IAAA,EAAoB;AAEpB,WAAA,cAAA;AAfG,KAAA;AAiBL,IAAA,cAAA,EAjBK,YAAA;AAkBL,IAAA,QAAA,EAlBK,YAAA;AAmBL,IAAA,SAAA,EAnBK,YAAA;AAoBL,IAAA,SApBK,EAAA,SAAA,SAAA,CAAA,GAAA,EAoBS;AACZ,UAAI,CAAJ,GAAA,EAAU,KAAA,YAAA,GAAA,CAAA;AArBP,KAAA;;AAuBL;AACA,IAAA,aAxBK,EAAA,SAAA,aAAA,CAAA,GAAA,EAwBa;AAChB;AACA,UAAI,CAAC,KAAA,UAAA,CAAL,OAAK,CAAL,EAA+B;AAE/B,WAAA,KAAA,CAAA,OAAA,EAAA,GAAA;AA5BG,KAAA;AA8BL,IAAA,SAAA,EA9BK,YAAA;AA+BL,IAAA,KAAA,EA/BK,YAAA;AAgCL,iCAhCK,UAAA;AAiCL,kCAjCK,UAAA;AAkCL,IAAA,YAlCK,EAAA,SAAA,YAAA,CAAA,GAAA,EAkCY;AACf,WAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,SAAA,GAAA,gBAAqD,CAArD,GAAA,GAAA,KAAA;;AACA,UAAI,KAAJ,SAAA,EAAoB;AAClB,aAAA,eAAA,GAAuB,KAAvB,aAAuB,EAAvB;AACA,aAAA,eAAA,GAAuB,KAAvB,aAAuB,EAAvB;AACD;AACF;AAxCI;AADM,CAAf","sourcesContent":["/**\n * Tabs watchers\n *\n * @mixin\n */\n/* @vue/component */\nexport default {\n  watch: {\n    activeTab (val, oldVal) {\n      this.setOverflow()\n\n      if (!val) return\n\n      this.tabItems && this.tabItems(\n        this.getValue(val, this.items.indexOf(val))\n      )\n\n      // Do nothing for first tab\n      // is handled from isBooted\n      // watcher\n      if (oldVal == null) return\n\n      this.updateTabsView()\n    },\n    alignWithTitle: 'callSlider',\n    centered: 'callSlider',\n    fixedTabs: 'callSlider',\n    hasArrows (val) {\n      if (!val) this.scrollOffset = 0\n    },\n    /* @deprecate */\n    internalValue (val) {\n      /* istanbul ignore else */\n      if (!this.$listeners['input']) return\n\n      this.$emit('input', val)\n    },\n    lazyValue: 'updateTabs',\n    right: 'callSlider',\n    '$vuetify.application.left': 'onResize',\n    '$vuetify.application.right': 'onResize',\n    scrollOffset (val) {\n      this.$refs.container.style.transform = `translateX(${-val}px)`\n      if (this.hasArrows) {\n        this.prevIconVisible = this.checkPrevIcon()\n        this.nextIconVisible = this.checkNextIcon()\n      }\n    }\n  }\n}\n"],"sourceRoot":""}]}