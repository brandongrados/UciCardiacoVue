{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\util\\theme.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\util\\theme.js","mtime":1589651993229},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589651934081},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1589651931824}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof2 from \"C:\\\\Users\\\\manue\\\\Desktop\\\\UciCardiacoVue\\\\ucicardiaco\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n  return _typeof2(obj);\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n};\n\nimport { colorToInt, intToHex, colorToHex } from './colorUtils';\nimport * as sRGB from './color/transformSRGB';\nimport * as LAB from './color/transformCIELAB';\nexport function parse(theme) {\n  var isItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var colors = Object.keys(theme);\n  var parsedTheme = {};\n\n  for (var i = 0; i < colors.length; ++i) {\n    var name = colors[i];\n    var value = theme[name];\n\n    if (isItem) {\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value);\n      }\n    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n      parsedTheme[name] = parse(value, true);\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value));\n    }\n  }\n\n  return parsedTheme;\n}\n/**\r\n * Generate the CSS for a base color (.primary)\r\n */\n\nvar genBaseColor = function genBaseColor(name, value) {\n  return '\\n.' + name + ' {\\n  background-color: ' + value + ' !important;\\n  border-color: ' + value + ' !important;\\n}\\n.' + name + '--text {\\n  color: ' + value + ' !important;\\n  caret-color: ' + value + ' !important;\\n}';\n};\n/**\r\n * Generate the CSS for a variant color (.primary.darken-2)\r\n */\n\n\nvar genVariantColor = function genVariantColor(name, variant, value) {\n  var _variant$split = variant.split(/(\\d)/, 2),\n      _variant$split2 = _slicedToArray(_variant$split, 2),\n      type = _variant$split2[0],\n      n = _variant$split2[1];\n\n  return '\\n.' + name + '.' + type + '-' + n + ' {\\n  background-color: ' + value + ' !important;\\n  border-color: ' + value + ' !important;\\n}\\n.' + name + '--text.text--' + type + '-' + n + ' {\\n  color: ' + value + ' !important;\\n  caret-color: ' + value + ' !important;\\n}';\n};\n\nvar genColorVariableName = function genColorVariableName(name) {\n  var variant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base';\n  return '--v-' + name + '-' + variant;\n};\n\nvar genColorVariable = function genColorVariable(name) {\n  var variant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base';\n  return 'var(' + genColorVariableName(name, variant) + ')';\n};\n\nexport function genStyles(theme) {\n  var cssVar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var colors = Object.keys(theme);\n  if (!colors.length) return '';\n  var variablesCss = '';\n  var css = '';\n  var aColor = cssVar ? genColorVariable('primary') : theme.primary.base;\n  css += 'a { color: ' + aColor + '; }';\n\n  for (var i = 0; i < colors.length; ++i) {\n    var name = colors[i];\n    var value = theme[name];\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') continue;\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);\n    cssVar && (variablesCss += '  ' + genColorVariableName(name) + ': ' + value.base + ';\\n');\n    var variants = Object.keys(value);\n\n    for (var _i = 0; _i < variants.length; ++_i) {\n      var variant = variants[_i];\n      var variantValue = value[variant];\n      if (variant === 'base') continue;\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue);\n      cssVar && (variablesCss += '  ' + genColorVariableName(name, variant) + ': ' + variantValue + ';\\n');\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = ':root {\\n' + variablesCss + '}\\n\\n';\n  }\n\n  return variablesCss + css;\n}\nexport function genVariations(name, value) {\n  var values = {\n    base: intToHex(value)\n  };\n\n  for (var i = 5; i > 0; --i) {\n    values['lighten' + i] = intToHex(lighten(value, i));\n  }\n\n  for (var _i2 = 1; _i2 <= 4; ++_i2) {\n    values['darken' + _i2] = intToHex(darken(value, _i2));\n  }\n\n  return values;\n}\n\nfunction lighten(value, amount) {\n  var lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\n\nfunction darken(value, amount) {\n  var lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}",{"version":3,"sources":["../../src/util/theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { colorToInt, intToHex, colorToHex, RGB } from './colorUtils'\nimport * as sRGB from './color/transformSRGB'\nimport * as LAB from './color/transformCIELAB'\nimport { VuetifyTheme } from 'vuetify/types'\n\ninterface ParsedThemeItem {\n  base: string\n  lighten5: string\n  lighten4: string\n  lighten3: string\n  lighten2: string\n  lighten1: string\n  darken1: string\n  darken2: string\n  darken3: string\n  darken4: string\n\n  [name: string]: string\n}\n\ninterface ParsedTheme {\n  [name: string]: ParsedThemeItem\n}\n\nexport function parse (theme: VuetifyTheme | Record<string, number | string>, isItem = false): ParsedTheme {\n  const colors = Object.keys(theme)\n  const parsedTheme: any = {}\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    if (isItem) {\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value)\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true)\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value))\n    }\n  }\n\n  return parsedTheme\n}\n\n/**\n * Generate the CSS for a base color (.primary)\n */\nconst genBaseColor = (name: string, value: string): string => {\n  return `\n.${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\nconst genVariantColor = (name: string, variant: string, value: string): string => {\n  const [type, n] = variant.split(/(\\d)/, 2)\n  return `\n.${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`\n}\n\nconst genColorVariableName = (name: string, variant = 'base'): string => `--v-${name}-${variant}`\n\nconst genColorVariable = (name: string, variant = 'base'): string => `var(${genColorVariableName(name, variant)})`\n\nexport function genStyles (theme: ParsedTheme, cssVar = false): string {\n  const colors = Object.keys(theme)\n\n  if (!colors.length) return ''\n\n  let variablesCss = ''\n  let css = ''\n\n  const aColor = cssVar ? genColorVariable('primary') : theme.primary.base\n  css += `a { color: ${aColor}; }`\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    if (typeof value !== 'object') continue\n\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base)\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`)\n\n    const variants = Object.keys(value)\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i]\n      const variantValue = value[variant]\n      if (variant === 'base') continue\n\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue)\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`)\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`\n  }\n\n  return variablesCss + css\n}\n\nexport function genVariations (name: string, value: RGB): Record<string, string> {\n  const values: Record<string, string> = {\n    base: intToHex(value)\n  }\n\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i))\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i))\n  }\n\n  return values\n}\n\nfunction lighten (value: RGB, amount: number): RGB {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n\nfunction darken (value: RGB, amount: number): RGB {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n"],"sourceRoot":""}]}