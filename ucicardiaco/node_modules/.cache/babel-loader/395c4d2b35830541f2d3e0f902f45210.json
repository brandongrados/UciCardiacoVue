{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VMenu\\mixins\\menu-keyable.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VMenu\\mixins\\menu-keyable.js","mtime":1590258019486},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590257978015},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590257976698}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\n/**\r\n * Menu keyable\r\n *\r\n * @mixin\r\n *\r\n * Primarily used to support VSelect\r\n * Handles opening and closing of VMenu from keystrokes\r\n * Will conditionally highlight VListTiles for VSelect\r\n */\n// Utils\nimport { keyCodes } from '../../../util/helpers';\n/* @vue/component */\n\nexport default {\n  data: function data() {\n    return {\n      listIndex: -1,\n      tiles: []\n    };\n  },\n  watch: {\n    isActive: function isActive(val) {\n      if (!val) this.listIndex = -1;\n    },\n    listIndex: function listIndex(next, prev) {\n      if (next in this.tiles) {\n        var tile = this.tiles[next];\n        tile.classList.add('v-list__tile--highlighted');\n        this.$refs.content.scrollTop = tile.offsetTop - tile.clientHeight;\n      }\n\n      prev in this.tiles && this.tiles[prev].classList.remove('v-list__tile--highlighted');\n    }\n  },\n  methods: {\n    onKeyDown: function onKeyDown(e) {\n      if ([keyCodes.down, keyCodes.up, keyCodes.enter].includes(e.keyCode)) e.preventDefault();\n\n      if ([keyCodes.esc, keyCodes.tab].includes(e.keyCode)) {\n        return this.isActive = false;\n      }\n\n      this.changeListIndex(e);\n    },\n    changeListIndex: function changeListIndex(e) {\n      // For infinite scroll and autocomplete, re-evaluate children\n      this.getTiles();\n\n      if (e.keyCode === keyCodes.down && this.listIndex < this.tiles.length - 1) {\n        this.listIndex++; // Allow user to set listIndex to -1 so\n        // that the list can be un-highlighted\n      } else if (e.keyCode === keyCodes.up && this.listIndex > -1) {\n        this.listIndex--;\n      } else if (e.keyCode === keyCodes.enter && this.listIndex !== -1) {\n        this.tiles[this.listIndex].click();\n      }\n    },\n    getTiles: function getTiles() {\n      this.tiles = this.$refs.content.querySelectorAll('.v-list__tile');\n    }\n  }\n};",{"version":3,"sources":["../../../../src/components/VMenu/mixins/menu-keyable.js"],"names":[],"mappings":";;;;;;;;;;;;AAUA;AACA,SAAA,QAAA,QAAA,uBAAA;AAEA;;AACA,eAAe;AACb,EAAA,IAAA,EAAM,SAAA,IAAA,GAAA;AAAA,WAAO;AACX,MAAA,SAAA,EAAW,CADA,CAAA;AAEX,MAAA,KAAA,EAAO;AAFI,KAAP;AADO,GAAA;AAMb,EAAA,KAAA,EAAO;AACL,IAAA,QADK,EAAA,SAAA,QAAA,CAAA,GAAA,EACQ;AACX,UAAI,CAAJ,GAAA,EAAU,KAAA,SAAA,GAAiB,CAAjB,CAAA;AAFP,KAAA;AAIL,IAAA,SAJK,EAAA,SAAA,SAAA,CAAA,IAAA,EAAA,IAAA,EAIgB;AACnB,UAAI,IAAA,IAAQ,KAAZ,KAAA,EAAwB;AACtB,YAAM,IAAA,GAAO,KAAA,KAAA,CAAb,IAAa,CAAb;AACA,QAAA,IAAA,CAAA,SAAA,CAAA,GAAA,CAAA,2BAAA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,SAAA,GAA+B,IAAA,CAAA,SAAA,GAAiB,IAAA,CAAhD,YAAA;AACD;;AAED,MAAA,IAAA,IAAQ,KAAR,KAAA,IACE,KAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,MAAA,CADF,2BACE,CADF;AAED;AAbI,GANM;AAsBb,EAAA,OAAA,EAAS;AACP,IAAA,SADO,EAAA,SAAA,SAAA,CAAA,CAAA,EACK;AACV,UAAI,CACF,QAAA,CADE,IAAA,EAEF,QAAA,CAFE,EAAA,EAGF,QAAA,CAHE,KAAA,EAAA,QAAA,CAIO,CAAA,CAJX,OAAI,CAAJ,EAKE,CAAA,CAAA,cAAA;;AAEF,UAAI,CAAC,QAAA,CAAD,GAAA,EAAe,QAAA,CAAf,GAAA,EAAA,QAAA,CAAsC,CAAA,CAA1C,OAAI,CAAJ,EAAsD;AACpD,eAAO,KAAA,QAAA,GAAP,KAAA;AACD;;AAED,WAAA,eAAA,CAAA,CAAA;AAbK,KAAA;AAeP,IAAA,eAfO,EAAA,SAAA,eAAA,CAAA,CAAA,EAeW;AAChB;AACA,WAAA,QAAA;;AAEA,UAAI,CAAA,CAAA,OAAA,KAAc,QAAA,CAAd,IAAA,IAA+B,KAAA,SAAA,GAAiB,KAAA,KAAA,CAAA,MAAA,GAApD,CAAA,EAA2E;AACzE,aAAA,SAAA,GADyE,CAEzE;AACA;AAHF,OAAA,MAIO,IAAI,CAAA,CAAA,OAAA,KAAc,QAAA,CAAd,EAAA,IAA6B,KAAA,SAAA,GAAiB,CAAlD,CAAA,EAAsD;AAC3D,aAAA,SAAA;AADK,OAAA,MAEA,IAAI,CAAA,CAAA,OAAA,KAAc,QAAA,CAAd,KAAA,IAAgC,KAAA,SAAA,KAAmB,CAAvD,CAAA,EAA2D;AAChE,aAAA,KAAA,CAAW,KAAX,SAAA,EAAA,KAAA;AACD;AA3BI,KAAA;AA6BP,IAAA,QA7BO,EAAA,SAAA,QAAA,GA6BC;AACN,WAAA,KAAA,GAAa,KAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAb,eAAa,CAAb;AACD;AA/BM;AAtBI,CAAf","sourcesContent":["/**\n * Menu keyable\n *\n * @mixin\n *\n * Primarily used to support VSelect\n * Handles opening and closing of VMenu from keystrokes\n * Will conditionally highlight VListTiles for VSelect\n */\n\n// Utils\nimport { keyCodes } from '../../../util/helpers'\n\n/* @vue/component */\nexport default {\n  data: () => ({\n    listIndex: -1,\n    tiles: []\n  }),\n\n  watch: {\n    isActive (val) {\n      if (!val) this.listIndex = -1\n    },\n    listIndex (next, prev) {\n      if (next in this.tiles) {\n        const tile = this.tiles[next]\n        tile.classList.add('v-list__tile--highlighted')\n        this.$refs.content.scrollTop = tile.offsetTop - tile.clientHeight\n      }\n\n      prev in this.tiles &&\n        this.tiles[prev].classList.remove('v-list__tile--highlighted')\n    }\n  },\n\n  methods: {\n    onKeyDown (e) {\n      if ([\n        keyCodes.down,\n        keyCodes.up,\n        keyCodes.enter\n      ].includes(e.keyCode)\n      ) e.preventDefault()\n\n      if ([keyCodes.esc, keyCodes.tab].includes(e.keyCode)) {\n        return this.isActive = false\n      }\n\n      this.changeListIndex(e)\n    },\n    changeListIndex (e) {\n      // For infinite scroll and autocomplete, re-evaluate children\n      this.getTiles()\n\n      if (e.keyCode === keyCodes.down && this.listIndex < this.tiles.length - 1) {\n        this.listIndex++\n        // Allow user to set listIndex to -1 so\n        // that the list can be un-highlighted\n      } else if (e.keyCode === keyCodes.up && this.listIndex > -1) {\n        this.listIndex--\n      } else if (e.keyCode === keyCodes.enter && this.listIndex !== -1) {\n        this.tiles[this.listIndex].click()\n      }\n    },\n    getTiles () {\n      this.tiles = this.$refs.content.querySelectorAll('.v-list__tile')\n    }\n  }\n}\n"],"sourceRoot":""}]}