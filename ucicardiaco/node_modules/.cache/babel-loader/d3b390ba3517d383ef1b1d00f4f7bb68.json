{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\util\\colorUtils.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\util\\colorUtils.js","mtime":1590258019991},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590257978015},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590257976698}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport { consoleWarn } from './console';\nexport function colorToInt(color) {\n  var rgb = void 0;\n\n  if (typeof color === 'number') {\n    rgb = color;\n  } else if (typeof color === 'string') {\n    var c = color[0] === '#' ? color.substring(1) : color;\n\n    if (c.length === 3) {\n      c = c.split('').map(function (char) {\n        return char + char;\n      }).join('');\n    }\n\n    if (c.length !== 6) {\n      consoleWarn('\\'' + color + '\\' is not a valid rgb color');\n    }\n\n    rgb = parseInt(c, 16);\n  } else {\n    throw new TypeError('Colors can only be numbers or strings, recieved ' + (color == null ? color : color.constructor.name) + ' instead');\n  }\n\n  if (rgb < 0) {\n    consoleWarn('Colors cannot be negative: \\'' + color + '\\'');\n    rgb = 0;\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn('\\'' + color + '\\' is not a valid rgb color');\n    rgb = 0xffffff;\n  }\n\n  return rgb;\n}\nexport function intToHex(color) {\n  var hexColor = color.toString(16);\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;\n  return '#' + hexColor;\n}\nexport function colorToHex(color) {\n  return intToHex(colorToInt(color));\n}",{"version":3,"sources":["../../src/util/colorUtils.ts"],"names":[],"mappings":";;;;AAAA,SAAA,WAAA,QAAA,WAAA;AAMA,OAAM,SAAA,UAAA,CAAA,KAAA,EAAiD;AACrD,MAAI,GAAA,GAAA,KAAJ,CAAA;;AAEA,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,IAAA,GAAA,GAAA,KAAA;AADF,GAAA,MAEO,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AACpC,QAAI,CAAA,GAAI,KAAA,CAAA,CAAA,CAAA,KAAA,GAAA,GAAmB,KAAA,CAAA,SAAA,CAAnB,CAAmB,CAAnB,GAAR,KAAA;;AACA,QAAI,CAAA,CAAA,MAAA,KAAJ,CAAA,EAAoB;AAClB,MAAA,CAAA,GAAI,CAAA,CAAA,KAAA,CAAA,EAAA,EAAA,GAAA,CAAgB,UAAA,IAAA,EAAA;AAAA,eAAQ,IAAA,GAAR,IAAA;AAAhB,OAAA,EAAA,IAAA,CAAJ,EAAI,CAAJ;AACD;;AACD,QAAI,CAAA,CAAA,MAAA,KAAJ,CAAA,EAAoB;AAClB,MAAA,WAAA,CAAA,OAAA,KAAA,GAAA,6BAAA,CAAA;AACD;;AACD,IAAA,GAAA,GAAM,QAAA,CAAA,CAAA,EAAN,EAAM,CAAN;AARK,GAAA,MASA;AACL,UAAM,IAAA,SAAA,CAAA,sDAAiE,KAAA,IAAA,IAAA,GAAA,KAAA,GAAwB,KAAA,CAAA,WAAA,CAAzF,IAAA,IAAN,UAAM,CAAN;AACD;;AAED,MAAI,GAAA,GAAJ,CAAA,EAAa;AACX,IAAA,WAAA,CAAA,kCAAA,KAAA,GAAA,IAAA,CAAA;AACA,IAAA,GAAA,GAAA,CAAA;AAFF,GAAA,MAGO,IAAI,GAAA,GAAA,QAAA,IAAkB,KAAA,CAAtB,GAAsB,CAAtB,EAAkC;AACvC,IAAA,WAAA,CAAA,OAAA,KAAA,GAAA,6BAAA,CAAA;AACA,IAAA,GAAA,GAAA,QAAA;AACD;;AAED,SAAA,GAAA;AACD;AAED,OAAM,SAAA,QAAA,CAAA,KAAA,EAA8B;AAClC,MAAI,QAAA,GAAmB,KAAA,CAAA,QAAA,CAAvB,EAAuB,CAAvB;AAEA,MAAI,QAAA,CAAA,MAAA,GAAJ,CAAA,EAAyB,QAAA,GAAW,IAAA,MAAA,CAAW,IAAI,QAAA,CAAf,MAAA,IAAX,QAAA;AAEzB,SAAO,MAAP,QAAA;AACD;AAED,OAAM,SAAA,UAAA,CAAA,KAAA,EAAiD;AACrD,SAAO,QAAA,CAAS,UAAA,CAAhB,KAAgB,CAAT,CAAP;AACD","sourcesContent":["import { consoleWarn } from './console'\n\nexport type RGB = number\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\n\nexport function colorToInt (color: string | number | {}): RGB {\n  let rgb\n\n  if (typeof color === 'number') {\n    rgb = color\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('')\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`)\n    }\n    rgb = parseInt(c, 16)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`)\n    rgb = 0\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`)\n    rgb = 0xffffff\n  }\n\n  return rgb\n}\n\nexport function intToHex (color: RGB): string {\n  let hexColor: string = color.toString(16)\n\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor\n\n  return '#' + hexColor\n}\n\nexport function colorToHex (color: string | number | {}): string {\n  return intToHex(colorToInt(color))\n}\n"],"sourceRoot":""}]}