{"remainingRequest":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeviewNode.js","dependencies":[{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeviewNode.js","mtime":499162500000},{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bjavi\\source\\repos\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.assign\";\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Components\n\n\nimport { VExpandTransition } from '../transitions';\nimport { VIcon } from '../VIcon';\nimport VTreeviewNode from './VTreeviewNode'; // Mixins\n\nimport { inject as RegistrableInject } from '../../mixins/registrable'; // Utils\n\nimport mixins from '../../util/mixins';\nimport { getObjectValueByPath } from '../../util/helpers';\nexport var VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active'\n  },\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent'\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxIndeterminate'\n  },\n  onIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOn'\n  },\n  offIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOff'\n  },\n  expandIcon: {\n    type: String,\n    default: '$vuetify.icons.subgroup'\n  },\n  loadingIcon: {\n    type: String,\n    default: '$vuetify.icons.loading'\n  },\n  itemKey: {\n    type: String,\n    default: 'id'\n  },\n  itemText: {\n    type: String,\n    default: 'name'\n  },\n  itemChildren: {\n    type: String,\n    default: 'children'\n  },\n  loadChildren: Function,\n  openOnClick: Boolean,\n  transition: Boolean\n};\nexport default mixins(RegistrableInject('treeview')\n/* @vue/component */\n).extend({\n  name: 'v-treeview-node',\n  inject: {\n    treeview: {\n      default: null\n    }\n  },\n  props: _extends({\n    item: {\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    }\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      isOpen: false,\n      isSelected: false,\n      isIndeterminate: false,\n      isActive: false,\n      isLoading: false,\n      hasLoaded: false\n    };\n  },\n  computed: {\n    key: function key() {\n      return getObjectValueByPath(this.item, this.itemKey);\n    },\n    children: function children() {\n      return getObjectValueByPath(this.item, this.itemChildren);\n    },\n    text: function text() {\n      return getObjectValueByPath(this.item, this.itemText);\n    },\n    scopedProps: function scopedProps() {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      };\n    },\n    computedIcon: function computedIcon() {\n      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;\n    },\n    hasChildren: function hasChildren() {\n      return !!this.children && (!!this.children.length || !!this.loadChildren);\n    }\n  },\n  created: function created() {\n    this.treeview.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.treeview.unregister(this);\n  },\n  methods: {\n    checkChildren: function checkChildren() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!_this.children || _this.children.length || !_this.loadChildren || _this.hasLoaded) return resolve();\n        _this.isLoading = true;\n        resolve(_this.loadChildren(_this.item));\n      }).then(function () {\n        _this.isLoading = false;\n        _this.hasLoaded = true;\n      });\n    },\n    open: function open() {\n      this.isOpen = !this.isOpen;\n      this.treeview.updateOpen(this.key, this.isOpen);\n      this.treeview.emitOpen();\n    },\n    genLabel: function genLabel() {\n      return this.$createElement('label', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, [this.text]);\n    },\n    genContent: function genContent() {\n      var children = [this.$scopedSlots.prepend && this.$scopedSlots.prepend(this.scopedProps), this.genLabel(), this.$scopedSlots.append && this.$scopedSlots.append(this.scopedProps)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children);\n    },\n    genToggle: function genToggle() {\n      var _this2 = this;\n\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this2.isLoading) return;\n\n            _this2.checkChildren().then(function () {\n              return _this2.open();\n            });\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);\n    },\n    genCheckbox: function genCheckbox() {\n      var _this3 = this;\n\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected ? this.selectedColor : undefined\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this3.isLoading) return;\n\n            _this3.checkChildren().then(function () {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              _this3.$nextTick(function () {\n                _this3.isSelected = !_this3.isSelected;\n                _this3.isIndeterminate = false;\n\n                _this3.treeview.updateSelected(_this3.key, _this3.isSelected);\n\n                _this3.treeview.emitSelected();\n              });\n            });\n          }\n        }\n      }, [this.computedIcon]);\n    },\n    genNode: function genNode() {\n      var _this4 = this;\n\n      var children = [this.genContent()];\n      if (this.selectable) children.unshift(this.genCheckbox());\n      if (this.hasChildren) children.unshift(this.genToggle());\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__root',\n        on: {\n          click: function click() {\n            if (_this4.openOnClick && _this4.children) {\n              _this4.open();\n            } else if (_this4.activatable) {\n              _this4.isActive = !_this4.isActive;\n\n              _this4.treeview.updateActive(_this4.key, _this4.isActive);\n\n              _this4.treeview.emitActive();\n            }\n          }\n        }\n      }, children);\n    },\n    genChild: function genChild(item) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item: item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick\n        },\n        scopedSlots: this.$scopedSlots\n      });\n    },\n    genChildrenWrapper: function genChildrenWrapper() {\n      if (!this.isOpen || !this.children) return null;\n      var children = [this.children.map(this.genChild)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children);\n    },\n    genTransition: function genTransition() {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()]);\n    }\n  },\n  render: function render(h) {\n    var _class;\n\n    var children = [this.genNode()];\n    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: (_class = {}, _defineProperty(_class, this.activeClass, this.isActive), _defineProperty(_class, 'v-treeview-node--leaf', !this.hasChildren), _defineProperty(_class, 'v-treeview-node--click', this.openOnClick), _defineProperty(_class, 'v-treeview-node--selected', this.isSelected), _class)\n    }, children);\n  }\n});",{"version":3,"sources":["../../../src/components/VTreeview/VTreeviewNode.ts"],"names":[],"mappings":"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","sourcesContent":["// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\nimport VTreeviewNode from './VTreeviewNode'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utils\nimport mixins from '../../util/mixins'\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { PropValidator } from 'vue/types/options'\n\n// Types\nimport Vue, { VNode } from 'vue'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\ninterface options extends Vue {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active'\n  },\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent'\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxIndeterminate'\n  },\n  onIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOn'\n  },\n  offIcon: {\n    type: String,\n    default: '$vuetify.icons.checkboxOff'\n  },\n  expandIcon: {\n    type: String,\n    default: '$vuetify.icons.subgroup'\n  },\n  loadingIcon: {\n    type: String,\n    default: '$vuetify.icons.loading'\n  },\n  itemKey: {\n    type: String,\n    default: 'id'\n  },\n  itemText: {\n    type: String,\n    default: 'name'\n  },\n  itemChildren: {\n    type: String,\n    default: 'children'\n  },\n  loadChildren: Function as PropValidator<(item: any) => Promise<void>>,\n  openOnClick: Boolean,\n  transition: Boolean\n}\n\nexport default mixins<options>(\n  RegistrableInject('treeview')\n  /* @vue/component */\n).extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null\n    }\n  },\n\n  props: {\n    item: {\n      type: Object,\n      default: () => null\n    },\n    ...VTreeviewNodeProps\n  },\n\n  data: () => ({\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n    isIndeterminate: false, // Node has at least one selected child\n    isActive: false, // Node is selected (row)\n    isLoading: false,\n    hasLoaded: false\n  }),\n\n  computed: {\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      return getObjectValueByPath(this.item, this.itemChildren)\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    }\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      return this.$createElement('label', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, [this.text])\n    },\n    genContent () {\n      const children = [\n        this.$scopedSlots.prepend && this.$scopedSlots.prepend(this.scopedProps),\n        this.genLabel(),\n        this.$scopedSlots.append && this.$scopedSlots.append(this.scopedProps)\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected ? this.selectedColor : undefined\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          }\n        }\n      }, [this.computedIcon])\n    },\n    genNode (): VNode {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n      if (this.hasChildren) children.unshift(this.genToggle())\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__root',\n        on: {\n          click: () => {\n            if (this.openOnClick && this.children) {\n              this.open()\n            } else if (this.activatable) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          }\n        }\n      }, children)\n    },\n    genChild (item: any): VNode {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick\n        },\n        scopedSlots: this.$scopedSlots\n      })\n    },\n    genChildrenWrapper (): any {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(this.genChild)]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    }\n  },\n\n  render (h): VNode {\n    const children = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        [this.activeClass]: this.isActive,\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--selected': this.isSelected\n      }\n    }, children)\n  }\n})\n"],"sourceRoot":""}]}