{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\mixins\\translatable.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\mixins\\translatable.js","mtime":1590258019952},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590257978015},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590257976698}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'translatable',\n  props: {\n    height: Number\n  },\n  data: function data() {\n    return {\n      elOffsetTop: 0,\n      parallax: 0,\n      parallaxDist: 0,\n      percentScrolled: 0,\n      scrollTop: 0,\n      windowHeight: 0,\n      windowBottom: 0\n    };\n  },\n  computed: {\n    imgHeight: function imgHeight() {\n      return this.objHeight();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('scroll', this.translate, false);\n    window.removeEventListener('resize', this.translate, false);\n  },\n  methods: {\n    calcDimensions: function calcDimensions() {\n      var offset = this.$el.getBoundingClientRect();\n      this.scrollTop = window.pageYOffset;\n      this.parallaxDist = this.imgHeight - this.height;\n      this.elOffsetTop = offset.top + this.scrollTop;\n      this.windowHeight = window.innerHeight;\n      this.windowBottom = this.scrollTop + this.windowHeight;\n    },\n    listeners: function listeners() {\n      window.addEventListener('scroll', this.translate, false);\n      window.addEventListener('resize', this.translate, false);\n    },\n\n    /** @abstract **/\n    objHeight: function objHeight() {\n      throw new Error('Not implemented !');\n    },\n    translate: function translate() {\n      this.calcDimensions();\n      this.percentScrolled = (this.windowBottom - this.elOffsetTop) / (parseInt(this.height) + this.windowHeight);\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled);\n    }\n  }\n});",{"version":3,"sources":["../../src/mixins/translatable.ts"],"names":[],"mappings":";AAAA,OAAA,GAAA,MAAA,KAAA;AAEA,eAAe,GAAA,CAAA,MAAA,CAAW;AACxB,EAAA,IAAA,EADwB,cAAA;AAGxB,EAAA,KAAA,EAAO;AACL,IAAA,MAAA,EAAQ;AADH,GAHiB;AAOxB,EAAA,IAAA,EAAM,SAAA,IAAA,GAAA;AAAA,WAAO;AACX,MAAA,WAAA,EADW,CAAA;AAEX,MAAA,QAAA,EAFW,CAAA;AAGX,MAAA,YAAA,EAHW,CAAA;AAIX,MAAA,eAAA,EAJW,CAAA;AAKX,MAAA,SAAA,EALW,CAAA;AAMX,MAAA,YAAA,EANW,CAAA;AAOX,MAAA,YAAA,EAAc;AAPH,KAAP;AAPkB,GAAA;AAiBxB,EAAA,QAAA,EAAU;AACR,IAAA,SADQ,EAAA,SAAA,SAAA,GACC;AACP,aAAO,KAAP,SAAO,EAAP;AACD;AAHO,GAjBc;AAuBxB,EAAA,aAvBwB,EAAA,SAAA,aAAA,GAuBX;AACX,IAAA,MAAA,CAAA,mBAAA,CAAA,QAAA,EAAqC,KAArC,SAAA,EAAA,KAAA;AACA,IAAA,MAAA,CAAA,mBAAA,CAAA,QAAA,EAAqC,KAArC,SAAA,EAAA,KAAA;AAzBsB,GAAA;AA4BxB,EAAA,OAAA,EAAS;AACP,IAAA,cADO,EAAA,SAAA,cAAA,GACO;AACZ,UAAM,MAAA,GAAS,KAAA,GAAA,CAAf,qBAAe,EAAf;AAEA,WAAA,SAAA,GAAiB,MAAA,CAAjB,WAAA;AACA,WAAA,YAAA,GAAoB,KAAA,SAAA,GAAiB,KAArC,MAAA;AACA,WAAA,WAAA,GAAmB,MAAA,CAAA,GAAA,GAAa,KAAhC,SAAA;AACA,WAAA,YAAA,GAAoB,MAAA,CAApB,WAAA;AACA,WAAA,YAAA,GAAoB,KAAA,SAAA,GAAiB,KAArC,YAAA;AARK,KAAA;AAUP,IAAA,SAVO,EAAA,SAAA,SAAA,GAUE;AACP,MAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAkC,KAAlC,SAAA,EAAA,KAAA;AACA,MAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAkC,KAAlC,SAAA,EAAA,KAAA;AAZK,KAAA;;AAcP;AACA,IAAA,SAfO,EAAA,SAAA,SAAA,GAeE;AACP,YAAM,IAAA,KAAA,CAAN,mBAAM,CAAN;AAhBK,KAAA;AAkBP,IAAA,SAlBO,EAAA,SAAA,SAAA,GAkBE;AACP,WAAA,cAAA;AAEA,WAAA,eAAA,GACE,CAAC,KAAA,YAAA,GAAoB,KAArB,WAAA,KACC,QAAA,CAAS,KAAT,MAAA,CAAA,GAAwB,KAF3B,YACE,CADF;AAKA,WAAA,QAAA,GAAgB,IAAA,CAAA,KAAA,CAAW,KAAA,YAAA,GAAoB,KAA/C,eAAgB,CAAhB;AACD;AA3BM;AA5Be,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'translatable',\n\n  props: {\n    height: Number\n  },\n\n  data: () => ({\n    elOffsetTop: 0,\n    parallax: 0,\n    parallaxDist: 0,\n    percentScrolled: 0,\n    scrollTop: 0,\n    windowHeight: 0,\n    windowBottom: 0\n  }),\n\n  computed: {\n    imgHeight (): number {\n      return this.objHeight()\n    }\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('scroll', this.translate, false)\n    window.removeEventListener('resize', this.translate, false)\n  },\n\n  methods: {\n    calcDimensions () {\n      const offset = this.$el.getBoundingClientRect()\n\n      this.scrollTop = window.pageYOffset\n      this.parallaxDist = this.imgHeight - this.height\n      this.elOffsetTop = offset.top + this.scrollTop\n      this.windowHeight = window.innerHeight\n      this.windowBottom = this.scrollTop + this.windowHeight\n    },\n    listeners () {\n      window.addEventListener('scroll', this.translate, false)\n      window.addEventListener('resize', this.translate, false)\n    },\n    /** @abstract **/\n    objHeight (): number {\n      throw new Error('Not implemented !')\n    },\n    translate () {\n      this.calcDimensions()\n\n      this.percentScrolled = (\n        (this.windowBottom - this.elOffsetTop) /\n        (parseInt(this.height) + this.windowHeight)\n      )\n\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled)\n    }\n  }\n})\n"],"sourceRoot":""}]}