{"remainingRequest":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\Vuetify\\mixins\\breakpoint.js","dependencies":[{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\Vuetify\\mixins\\breakpoint.js","mtime":1590205710276},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1590205630444},{"path":"C:\\Users\\miguel\\Desktop\\Sistema Uci Miguel Laurente\\Front\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1590379779432}],"contextDependencies":[],"result":["import Vue from 'vue';\n/**\r\n * A modified version of https://gist.github.com/cb109/b074a65f7595cffc21cea59ce8d15f9b\r\n */\n\n/**\r\n * A Vue mixin to get the current width/height and the associated breakpoint.\r\n *\r\n *   <div v-if=\"$breakpoint.smAndDown\">...</div>\r\n *\r\n */\n\nexport default Vue.extend({\n  data: function data() {\n    return {\n      clientHeight: getClientHeight(),\n      clientWidth: getClientWidth(),\n      resizeTimeout: undefined\n    };\n  },\n  computed: {\n    breakpoint: function breakpoint() {\n      var xs = this.clientWidth < 600;\n      var sm = this.clientWidth < 960 && !xs;\n      var md = this.clientWidth < 1280 - 16 && !(sm || xs);\n      var lg = this.clientWidth < 1920 - 16 && !(md || sm || xs);\n      var xl = this.clientWidth >= 1920 - 16;\n      var xsOnly = xs;\n      var smOnly = sm;\n      var smAndDown = (xs || sm) && !(md || lg || xl);\n      var smAndUp = !xs && (sm || md || lg || xl);\n      var mdOnly = md;\n      var mdAndDown = (xs || sm || md) && !(lg || xl);\n      var mdAndUp = !(xs || sm) && (md || lg || xl);\n      var lgOnly = lg;\n      var lgAndDown = (xs || sm || md || lg) && !xl;\n      var lgAndUp = !(xs || sm || md) && (lg || xl);\n      var xlOnly = xl;\n      var name = void 0;\n\n      switch (true) {\n        case xs:\n          name = 'xs';\n          break;\n\n        case sm:\n          name = 'sm';\n          break;\n\n        case md:\n          name = 'md';\n          break;\n\n        case lg:\n          name = 'lg';\n          break;\n\n        default:\n          name = 'xl';\n          break;\n      }\n\n      return {\n        // Definite breakpoint.\n        xs: xs,\n        sm: sm,\n        md: md,\n        lg: lg,\n        xl: xl,\n        // Useful e.g. to construct CSS class names dynamically.\n        name: name,\n        // Breakpoint ranges.\n        xsOnly: xsOnly,\n        smOnly: smOnly,\n        smAndDown: smAndDown,\n        smAndUp: smAndUp,\n        mdOnly: mdOnly,\n        mdAndDown: mdAndDown,\n        mdAndUp: mdAndUp,\n        lgOnly: lgOnly,\n        lgAndDown: lgAndDown,\n        lgAndUp: lgAndUp,\n        xlOnly: xlOnly,\n        // For custom breakpoint logic.\n        width: this.clientWidth,\n        height: this.clientHeight\n      };\n    }\n  },\n  created: function created() {\n    if (typeof window === 'undefined') return;\n    window.addEventListener('resize', this.onResize, {\n      passive: true\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (typeof window === 'undefined') return;\n    window.removeEventListener('resize', this.onResize);\n  },\n  methods: {\n    onResize: function onResize() {\n      clearTimeout(this.resizeTimeout); // Added debounce to match what\n      // v-resize used to do but was\n      // removed due to a memory leak\n      // https://github.com/vuetifyjs/vuetify/pull/2997\n\n      this.resizeTimeout = window.setTimeout(this.setDimensions, 200);\n    },\n    setDimensions: function setDimensions() {\n      this.clientHeight = getClientHeight();\n      this.clientWidth = getClientWidth();\n    }\n  }\n}); // Cross-browser support as described in:\n// https://stackoverflow.com/questions/1248081\n\nfunction getClientWidth() {\n  if (typeof document === 'undefined') return 0; // SSR\n\n  return Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n}\n\nfunction getClientHeight() {\n  if (typeof document === 'undefined') return 0; // SSR\n\n  return Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n}",{"version":3,"sources":["../../../../src/components/Vuetify/mixins/breakpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport { VuetifyBreakpoint } from 'vuetify/types'\n\n/**\n * A modified version of https://gist.github.com/cb109/b074a65f7595cffc21cea59ce8d15f9b\n */\n\n/**\n * A Vue mixin to get the current width/height and the associated breakpoint.\n *\n *   <div v-if=\"$breakpoint.smAndDown\">...</div>\n *\n */\nexport default Vue.extend({\n  data: () => ({\n    clientHeight: getClientHeight(),\n    clientWidth: getClientWidth(),\n    resizeTimeout: undefined as number | undefined\n  }),\n\n  computed: {\n    breakpoint (): VuetifyBreakpoint {\n      const xs = this.clientWidth < 600\n      const sm = this.clientWidth < 960 && !xs\n      const md = this.clientWidth < (1280 - 16) && !(sm || xs)\n      const lg = this.clientWidth < (1920 - 16) && !(md || sm || xs)\n      const xl = this.clientWidth >= (1920 - 16)\n\n      const xsOnly = xs\n      const smOnly = sm\n      const smAndDown = (xs || sm) && !(md || lg || xl)\n      const smAndUp = !xs && (sm || md || lg || xl)\n      const mdOnly = md\n      const mdAndDown = (xs || sm || md) && !(lg || xl)\n      const mdAndUp = !(xs || sm) && (md || lg || xl)\n      const lgOnly = lg\n      const lgAndDown = (xs || sm || md || lg) && !xl\n      const lgAndUp = !(xs || sm || md) && (lg || xl)\n      const xlOnly = xl\n\n      let name\n      switch (true) {\n        case (xs):\n          name = 'xs'\n          break\n        case (sm):\n          name = 'sm'\n          break\n        case (md):\n          name = 'md'\n          break\n        case (lg):\n          name = 'lg'\n          break\n        default:\n          name = 'xl'\n          break\n      }\n\n      return {\n        // Definite breakpoint.\n        xs,\n        sm,\n        md,\n        lg,\n        xl,\n\n        // Useful e.g. to construct CSS class names dynamically.\n        name,\n\n        // Breakpoint ranges.\n        xsOnly,\n        smOnly,\n        smAndDown,\n        smAndUp,\n        mdOnly,\n        mdAndDown,\n        mdAndUp,\n        lgOnly,\n        lgAndDown,\n        lgAndUp,\n        xlOnly,\n\n        // For custom breakpoint logic.\n        width: this.clientWidth,\n        height: this.clientHeight\n      }\n    }\n  },\n\n  created () {\n    if (typeof window === 'undefined') return\n\n    window.addEventListener('resize', this.onResize, { passive: true })\n  },\n\n  beforeDestroy () {\n    if (typeof window === 'undefined') return\n\n    window.removeEventListener('resize', this.onResize)\n  },\n\n  methods: {\n    onResize (): void {\n      clearTimeout(this.resizeTimeout)\n\n      // Added debounce to match what\n      // v-resize used to do but was\n      // removed due to a memory leak\n      // https://github.com/vuetifyjs/vuetify/pull/2997\n      this.resizeTimeout = window.setTimeout(this.setDimensions, 200)\n    },\n    setDimensions (): void {\n      this.clientHeight = getClientHeight()\n      this.clientWidth = getClientWidth()\n    }\n  }\n})\n\n// Cross-browser support as described in:\n// https://stackoverflow.com/questions/1248081\nfunction getClientWidth () {\n  if (typeof document === 'undefined') return 0 // SSR\n  return Math.max(\n    document.documentElement!.clientWidth,\n    window.innerWidth || 0\n  )\n}\n\nfunction getClientHeight () {\n  if (typeof document === 'undefined') return 0 // SSR\n  return Math.max(\n    document.documentElement!.clientHeight,\n    window.innerHeight || 0\n  )\n}\n"],"sourceRoot":""}]}