{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VProgressCircular\\VProgressCircular.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VProgressCircular\\VProgressCircular.js","mtime":1589651992591},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589651934081},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1589651931824}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport '../../../src/stylus/components/_progress-circular.styl'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport mixins from '../../util/mixins';\n/* @vue/component */\n\nexport default mixins(Colorable).extend({\n  name: 'v-progress-circular',\n  props: {\n    button: Boolean,\n    indeterminate: Boolean,\n    rotate: {\n      type: Number,\n      default: 0\n    },\n    size: {\n      type: [Number, String],\n      default: 32\n    },\n    width: {\n      type: Number,\n      default: 4\n    },\n    value: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  computed: {\n    calculatedSize: function calculatedSize() {\n      return Number(this.size) + (this.button ? 8 : 0);\n    },\n    circumference: function circumference() {\n      return 2 * Math.PI * this.radius;\n    },\n    classes: function classes() {\n      return {\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button\n      };\n    },\n    normalizedValue: function normalizedValue() {\n      if (this.value < 0) {\n        return 0;\n      }\n\n      if (this.value > 100) {\n        return 100;\n      }\n\n      return parseFloat(this.value);\n    },\n    radius: function radius() {\n      return 20;\n    },\n    strokeDashArray: function strokeDashArray() {\n      return Math.round(this.circumference * 1000) / 1000;\n    },\n    strokeDashOffset: function strokeDashOffset() {\n      return (100 - this.normalizedValue) / 100 * this.circumference + 'px';\n    },\n    strokeWidth: function strokeWidth() {\n      return this.width / +this.size * this.viewBoxSize * 2;\n    },\n    styles: function styles() {\n      return {\n        height: this.calculatedSize + 'px',\n        width: this.calculatedSize + 'px'\n      };\n    },\n    svgStyles: function svgStyles() {\n      return {\n        transform: 'rotate(' + this.rotate + 'deg)'\n      };\n    },\n    viewBoxSize: function viewBoxSize() {\n      return this.radius / (1 - this.width / +this.size);\n    }\n  },\n  methods: {\n    genCircle: function genCircle(h, name, offset) {\n      return h('circle', {\n        class: 'v-progress-circular__' + name,\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset\n        }\n      });\n    },\n    genSvg: function genSvg(h) {\n      var children = [this.indeterminate || this.genCircle(h, 'underlay', 0), this.genCircle(h, 'overlay', this.strokeDashOffset)];\n      return h('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: this.viewBoxSize + ' ' + this.viewBoxSize + ' ' + 2 * this.viewBoxSize + ' ' + 2 * this.viewBoxSize\n        }\n      }, children);\n    }\n  },\n  render: function render(h) {\n    var info = h('div', {\n      staticClass: 'v-progress-circular__info'\n    }, [this.$slots.default]);\n    var svg = this.genSvg(h);\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        'role': 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue\n      },\n      class: this.classes,\n      style: this.styles,\n      on: this.$listeners\n    }), [svg, info]);\n  }\n});",{"version":3,"sources":["../../../src/components/VProgressCircular/VProgressCircular.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../stylus/components/_progress-circular.styl'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { CreateElement, VNode, VNodeChildrenArrayContents } from 'vue'\n\n/* @vue/component */\nexport default mixins(Colorable).extend({\n  name: 'v-progress-circular',\n\n  props: {\n    button: Boolean,\n\n    indeterminate: Boolean,\n\n    rotate: {\n      type: Number,\n      default: 0\n    },\n\n    size: {\n      type: [Number, String],\n      default: 32\n    },\n\n    width: {\n      type: Number,\n      default: 4\n    },\n\n    value: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n\n  computed: {\n    calculatedSize (): number {\n      return Number(this.size) + (this.button ? 8 : 0)\n    },\n\n    circumference (): number {\n      return 2 * Math.PI * this.radius\n    },\n\n    classes (): object {\n      return {\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button\n      }\n    },\n\n    normalizedValue (): number {\n      if (this.value < 0) {\n        return 0\n      }\n\n      if (this.value > 100) {\n        return 100\n      }\n\n      return parseFloat(this.value)\n    },\n\n    radius (): number {\n      return 20\n    },\n\n    strokeDashArray (): number {\n      return Math.round(this.circumference * 1000) / 1000\n    },\n\n    strokeDashOffset (): string {\n      return ((100 - this.normalizedValue) / 100) * this.circumference + 'px'\n    },\n\n    strokeWidth (): number {\n      return this.width / +this.size * this.viewBoxSize * 2\n    },\n\n    styles (): object {\n      return {\n        height: `${this.calculatedSize}px`,\n        width: `${this.calculatedSize}px`\n      }\n    },\n\n    svgStyles (): object {\n      return {\n        transform: `rotate(${this.rotate}deg)`\n      }\n    },\n\n    viewBoxSize (): number {\n      return this.radius / (1 - this.width / +this.size)\n    }\n  },\n\n  methods: {\n    genCircle (h: CreateElement, name: string, offset: string | number): VNode {\n      return h('circle', {\n        class: `v-progress-circular__${name}`,\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset\n        }\n      })\n    },\n    genSvg (h: CreateElement): VNode {\n      const children = [\n        this.indeterminate || this.genCircle(h, 'underlay', 0),\n        this.genCircle(h, 'overlay', this.strokeDashOffset)\n      ] as VNodeChildrenArrayContents\n\n      return h('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: `${this.viewBoxSize} ${this.viewBoxSize} ${2 * this.viewBoxSize} ${2 * this.viewBoxSize}`\n        }\n      }, children)\n    }\n  },\n\n  render (h): VNode {\n    const info = h('div', { staticClass: 'v-progress-circular__info' }, [this.$slots.default])\n    const svg = this.genSvg(h)\n\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        'role': 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue\n      },\n      class: this.classes,\n      style: this.styles,\n      on: this.$listeners\n    }), [svg, info])\n  }\n})\n"],"sourceRoot":""}]}