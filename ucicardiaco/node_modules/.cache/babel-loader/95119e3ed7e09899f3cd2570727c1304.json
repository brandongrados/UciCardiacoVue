{"remainingRequest":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","dependencies":[{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","mtime":1589651993017},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589651934081},{"path":"C:\\Users\\manue\\Desktop\\UciCardiacoVue\\ucicardiaco\\node_modules\\babel-loader\\lib\\index.js","mtime":1589651931824}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.object.assign\";\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} // Styles\n\n\nimport '../../../src/stylus/components/_treeview.styl'; // Components\n\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'; // Mixins\n\nimport Themeable from '../../mixins/themeable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utils\n\nimport { getObjectValueByPath, deepEqual } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\n\nfunction ston(s) {\n  var n = Number(s);\n  return !isNaN(n) ? n : s;\n}\n\nexport default mixins(RegistrableProvide('treeview'), Themeable\n/* @vue/component */\n).extend({\n  name: 'v-treeview',\n  provide: function provide() {\n    return {\n      treeview: this\n    };\n  },\n  props: _extends({\n    active: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    items: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    hoverable: Boolean,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    openAll: Boolean,\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      nodes: {},\n      selectedCache: new Set(),\n      activeCache: new Set(),\n      openCache: new Set()\n    };\n  },\n  watch: {\n    items: {\n      handler: function handler() {\n        // We only care if nodes are removed or added\n        if (Object.keys(this.nodes).length === this.countItems(this.items)) return;\n        var oldSelectedCache = [].concat(_toConsumableArray(this.selectedCache));\n        this.selectedCache = new Set();\n        this.activeCache = new Set();\n        this.openCache = new Set();\n        this.buildTree(this.items); // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n\n        if (!deepEqual(oldSelectedCache, [].concat(_toConsumableArray(this.selectedCache)))) this.emitSelected();\n      },\n      deep: true\n    },\n    active: function active(value) {\n      var _this = this;\n\n      var old = [].concat(_toConsumableArray(this.activeCache));\n      if (!value || deepEqual(old, value)) return;\n      old.forEach(function (key) {\n        return _this.updateActive(key, false);\n      });\n      value.forEach(function (key) {\n        return _this.updateActive(key, true);\n      });\n      this.emitActive();\n    },\n    value: function value(_value) {\n      var _this2 = this;\n\n      var old = [].concat(_toConsumableArray(this.selectedCache));\n      if (!_value || deepEqual(old, _value)) return;\n      old.forEach(function (key) {\n        return _this2.updateSelected(key, false);\n      });\n\n      _value.forEach(function (key) {\n        return _this2.updateSelected(key, true);\n      });\n\n      this.emitSelected();\n    },\n    open: function open(value) {\n      var _this3 = this;\n\n      var old = [].concat(_toConsumableArray(this.openCache));\n      if (deepEqual(old, value)) return;\n      old.forEach(function (key) {\n        return _this3.updateOpen(key, false);\n      });\n      value.forEach(function (key) {\n        return _this3.updateOpen(key, true);\n      });\n      this.emitOpen();\n    }\n  },\n  created: function created() {\n    var _this4 = this;\n\n    this.buildTree(this.items);\n    this.value.forEach(function (key) {\n      return _this4.updateSelected(key, true);\n    });\n    this.emitSelected();\n    this.active.forEach(function (key) {\n      return _this4.updateActive(key, true);\n    });\n    this.emitActive();\n  },\n  mounted: function mounted() {\n    var _this5 = this; // Save the developer from themselves\n\n\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this);\n    }\n\n    if (this.openAll) {\n      Object.keys(this.nodes).forEach(function (key) {\n        return _this5.updateOpen(ston(key), true);\n      });\n    } else {\n      this.open.forEach(function (key) {\n        return _this5.updateOpen(key, true);\n      });\n    }\n\n    this.emitOpen();\n  },\n  methods: {\n    buildTree: function buildTree(items) {\n      var _this6 = this;\n\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var key = getObjectValueByPath(item, this.itemKey);\n        var children = getObjectValueByPath(item, this.itemChildren, []);\n        var oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false,\n          isIndeterminate: false,\n          isActive: false,\n          isOpen: false,\n          vnode: null\n        };\n        var node = {\n          vnode: oldNode.vnode,\n          parent: parent,\n          children: children.map(function (c) {\n            return getObjectValueByPath(c, _this6.itemKey);\n          })\n        };\n        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state\n\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected;\n          node.isIndeterminate = this.nodes[parent].isIndeterminate;\n        } else {\n          node.isSelected = oldNode.isSelected;\n          node.isIndeterminate = oldNode.isIndeterminate;\n        }\n\n        node.isActive = oldNode.isActive;\n        node.isOpen = oldNode.isOpen;\n        this.nodes[key] = !children.length ? node : this.calculateState(node, this.nodes); // Don't forget to rebuild cache\n\n        if (this.nodes[key].isSelected) this.selectedCache.add(key);\n        if (this.nodes[key].isActive) this.activeCache.add(key);\n        if (this.nodes[key].isOpen) this.openCache.add(key);\n        this.updateVnodeState(key);\n      }\n    },\n    countItems: function countItems(items) {\n      var count = 0;\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        count += 1;\n        count += item.children ? this.countItems(item.children) : 0;\n      }\n\n      return count;\n    },\n    calculateState: function calculateState(node, state) {\n      var counts = node.children.reduce(function (counts, child) {\n        counts[0] += +Boolean(state[child].isSelected);\n        counts[1] += +Boolean(state[child].isIndeterminate);\n        return counts;\n      }, [0, 0]);\n      node.isSelected = !!node.children.length && counts[0] === node.children.length;\n      node.isIndeterminate = !node.isSelected && (counts[0] > 0 || counts[1] > 0);\n      return node;\n    },\n    emitOpen: function emitOpen() {\n      this.$emit('update:open', [].concat(_toConsumableArray(this.openCache)));\n    },\n    emitSelected: function emitSelected() {\n      this.$emit('input', [].concat(_toConsumableArray(this.selectedCache)));\n    },\n    emitActive: function emitActive() {\n      this.$emit('update:active', [].concat(_toConsumableArray(this.activeCache)));\n    },\n    getDescendants: function getDescendants(key) {\n      var _descendants;\n\n      var descendants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var children = this.nodes[key].children;\n\n      (_descendants = descendants).push.apply(_descendants, _toConsumableArray(children));\n\n      for (var i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants);\n      }\n\n      return descendants;\n    },\n    getParents: function getParents(key) {\n      var parent = this.nodes[key].parent;\n      var parents = [];\n\n      while (parent !== null) {\n        parents.push(parent);\n        parent = this.nodes[parent].parent;\n      }\n\n      return parents;\n    },\n    register: function register(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = node;\n      this.updateVnodeState(key);\n    },\n    unregister: function unregister(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = null;\n    },\n    updateActive: function updateActive(key, isActive) {\n      var _this7 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(function (active) {\n          _this7.nodes[active].isActive = false;\n\n          _this7.updateVnodeState(active);\n\n          _this7.activeCache.delete(active);\n        });\n      }\n\n      var node = this.nodes[key];\n      if (!node) return;\n      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);\n      node.isActive = isActive;\n      this.updateVnodeState(key);\n    },\n    updateSelected: function updateSelected(key, isSelected) {\n      var _this8 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var changed = {};\n      var descendants = [key].concat(_toConsumableArray(this.getDescendants(key)));\n      descendants.forEach(function (descendant) {\n        _this8.nodes[descendant].isSelected = isSelected;\n        _this8.nodes[descendant].isIndeterminate = false;\n        changed[descendant] = isSelected;\n      });\n      var parents = this.getParents(key);\n      parents.forEach(function (parent) {\n        _this8.nodes[parent] = _this8.calculateState(_this8.nodes[parent], _this8.nodes);\n        changed[parent] = _this8.nodes[parent].isSelected;\n      });\n      var all = [key].concat(_toConsumableArray(descendants), _toConsumableArray(parents));\n      all.forEach(this.updateVnodeState);\n      Object.keys(changed).forEach(function (k) {\n        changed[k] === true ? _this8.selectedCache.add(ston(k)) : _this8.selectedCache.delete(ston(k));\n      });\n    },\n    updateOpen: function updateOpen(key, isOpen) {\n      var _this9 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var node = this.nodes[key];\n\n      if (node.children && !node.children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(function () {\n          return _this9.updateOpen(key, isOpen);\n        });\n      } else {\n        node.isOpen = isOpen;\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);\n        this.updateVnodeState(key);\n      }\n    },\n    updateVnodeState: function updateVnodeState(key) {\n      var node = this.nodes[key];\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected;\n        node.vnode.isIndeterminate = node.isIndeterminate;\n        node.vnode.isActive = node.isActive;\n        node.vnode.isOpen = node.isOpen;\n      }\n    }\n  },\n  render: function render(h) {\n    var children = this.items.length ? this.items.map(VTreeviewNode.options.methods.genChild.bind(this))\n    /* istanbul ignore next */\n    : this.$slots.default;\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: _extends({\n        'v-treeview--hoverable': this.hoverable\n      }, this.themeClasses)\n    }, children);\n  }\n});",{"version":3,"sources":["../../../src/components/VTreeview/VTreeview.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport '../../stylus/components/_treeview.styl'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport { getObjectValueByPath, deepEqual } from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n}\n\nfunction ston (s: string | number) {\n  const n = Number(s)\n  return !isNaN(n) ? n : s\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => ([])\n    } as PropValidator<NodeArray>,\n    items: {\n      type: Array,\n      default: () => ([])\n    } as PropValidator<any[]>,\n    hoverable: Boolean,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => ([])\n    } as PropValidator<NodeArray>,\n    openAll: Boolean,\n    value: {\n      type: Array,\n      default: () => ([])\n    } as PropValidator<NodeArray>,\n    ...VTreeviewNodeProps\n  },\n\n  data: () => ({\n    nodes: {} as Record<string | number, NodeState>,\n    selectedCache: new Set() as NodeCache,\n    activeCache: new Set() as NodeCache,\n    openCache: new Set() as NodeCache\n  }),\n\n  watch: {\n    items: {\n      handler () {\n        // We only care if nodes are removed or added\n        if (Object.keys(this.nodes).length === this.countItems(this.items)) return\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true\n    },\n    active (value: (string | number)[]) {\n      const old = [...this.activeCache]\n      if (!value || deepEqual(old, value)) return\n\n      old.forEach(key => this.updateActive(key, false))\n      value.forEach(key => this.updateActive(key, true))\n      this.emitActive()\n    },\n    value (value: (string | number)[]) {\n      const old = [...this.selectedCache]\n      if (!value || deepEqual(old, value)) return\n\n      old.forEach(key => this.updateSelected(key, false))\n      value.forEach(key => this.updateSelected(key, true))\n      this.emitSelected()\n    },\n    open (value: (string | number)[]) {\n      const old = [...this.openCache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => this.updateOpen(key, false))\n      value.forEach(key => this.updateOpen(key, true))\n      this.emitOpen()\n    }\n  },\n\n  created () {\n    this.buildTree(this.items)\n    this.value.forEach(key => this.updateSelected(key, true))\n    this.emitSelected()\n    this.active.forEach(key => this.updateActive(key, true))\n    this.emitActive()\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(ston(key), true))\n    } else {\n      this.open.forEach(key => this.updateOpen(key, true))\n    }\n\n    this.emitOpen()\n  },\n\n  methods: {\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren, [])\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey))\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected\n          node.isIndeterminate = this.nodes[parent].isIndeterminate\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = !children.length ? node : this.calculateState(node, this.nodes)\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    countItems (items: any[]) {\n      let count = 0\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        count += 1\n        count += item.children ? this.countItems(item.children) : 0\n      }\n\n      return count\n    },\n    calculateState (node: NodeState, state: Record<string | number, NodeState>) {\n      const counts = node.children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n        return counts\n      }, [0, 0])\n\n      node.isSelected = !!node.children.length && counts[0] === node.children.length\n      node.isIndeterminate = !node.isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return node\n    },\n    emitOpen () {\n      this.$emit('update:open', [...this.openCache])\n    },\n    emitSelected () {\n      this.$emit('input', [...this.selectedCache])\n    },\n    emitActive () {\n      this.$emit('update:active', [...this.activeCache])\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = null\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed: Record<string | number, boolean> = {}\n\n      const descendants = [key, ...this.getDescendants(key)]\n      descendants.forEach(descendant => {\n        this.nodes[descendant].isSelected = isSelected\n        this.nodes[descendant].isIndeterminate = false\n        changed[descendant] = isSelected\n      })\n\n      const parents = this.getParents(key)\n      parents.forEach(parent => {\n        this.nodes[parent] = this.calculateState(this.nodes[parent], this.nodes)\n        changed[parent] = this.nodes[parent].isSelected\n      })\n\n      const all = [key, ...descendants, ...parents]\n      all.forEach(this.updateVnodeState)\n\n      Object.keys(changed).forEach(k => {\n        changed[k] === true ? this.selectedCache.add(ston(k)) : this.selectedCache.delete(ston(k))\n      })\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n\n      if (node.children && !node.children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    }\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.map(VTreeviewNode.options.methods.genChild.bind(this))\n      /* istanbul ignore next */\n      : this.$slots.default\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        ...this.themeClasses\n      }\n    }, children)\n  }\n})\n"],"sourceRoot":""}]}